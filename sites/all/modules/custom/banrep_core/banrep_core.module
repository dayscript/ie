<?php
/**
 * @file
 * Defines banrep_core module functionality.
 */

// Load all Forms of this module.
require_once 'banrep_core.functions.inc';
require_once 'banrep_core.form.inc';

define('VID_GRUPOS_INVESTIGACION', '2');
define('RID_ADMINISTRADOR_GRUPO', '7');

define('INVESTIGADOR_RID', '4');
define('ADMIN_GRUPO_RID', '7');
define('SEMINARIO_TID', '191');
define('SOLUCIONES_CAIE_VID', '12');
define('RECURSOS_CAIE_VID', '18');
define('COLABORADORES_CAIE_VID', '19');
define('CIFRAS_CAIE_VID', '20');
define('CATEGORIAS_DE_CONCEPTOS_VID', '13');

define('PUB_TYPE_OTHER_CONCEPT', '211');
define('PUB_TYPE_ARTICLE', '201');
define('PUB_TYPE_ARTICLE_TIPO_5', '3016');
define('PUB_TYPE_BOOK', '206');
define('PUB_TYPE_BOOK_CHAPTER', '1');
define('PUB_TYPE_WORK_DOCUMENT', '2951');
define('PUB_TYPE_OTHER_DOCUMENT', '15317');
define('PUB_TYPE_CONFERENCE_DOCUMENT', '2954');
define('PUB_TYPE_ESPE_MAGAZINE', '20662');
define('PUB_TYPE_OTHERS_DOCUMENTS', '20708');


define('CONCEPT_TYPE_WORK_DOCUMENT', '2951');
define('CONCEPT_TYPE_OTHER_DOCUMENT', '15317');

define('ROL_AUTHOR_COMPLETE_TID', '219');
define('ROL_CHAPTER_AUTHOR_TID', '220');
define('ROL_BOOK_EDITOR_TID', '221');
define('ROL_BOOK_COMPILER_TID', '222');
define('ROL_AUTHOR_BOOK', TRUE);


define('PUB_REVIEW_PENDING', 'pendiente');
define('PUB_REVIEW_REVIEWED', 'revisado');

define('PUB_STATUS_APPROVED', '3');

define('SERVICES_FORM_NID_1', '1928');
define('SERVICES_FORM_NID_2', '1929');
define('SERVICES_FORM_NID_3', '1930');
define('SERVICES_FORM_NID_4', '1931');
define('SERVICES_FORM_NID_5', '1932');
define('SERVICES_FORM_NID_6', '1934');
define('SERVICES_FORM_NID_7', '1933');
define('SERVICES_FORM_NID_8', '1935');
define('SERVICES_FORM_NID_9', '1936');

define('REPEC_API_URL', 'http://citec.repec.org/api/plain/');

/**
 * Implements hook_perm().
 */
function core_etc_permission() {
  return array(
    'administer banrep' => array(
      'title' => 'Administrar Banrep',
      'description' => 'Funciones generales del CMS Banrep',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function banrep_core_menu() {

  // path with autocomplete function for concepts
  $items['concept/autocomplete/%'] = array(
    'title' => 'Autocomplete for concepts',
    'page callback' => '_concept_autocomplete',
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK
  );

  // path with autocomplete function for concepts type article
  $items['article/autocomplete/%/%'] = array(
    'title' => 'Autocomplete for concepts',
    'page callback' => '_concept_autocomplete',
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(2,3),
    'type' => MENU_CALLBACK
  );

  // path with autocomplete function for concepts type book
  $items['book/autocomplete/%'] = array(
    'title' => 'Autocomplete for concepts',
    'page callback' => '_concept_autocomplete',
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK
  );

  // path with autocomplete function for concepts type book chapter
  $items['book_chapter/autocomplete/%'] = array(
    'title' => 'Autocomplete for concepts',
    'page callback' => '_concept_autocomplete',
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK
  );

  // path with autocomplete function for concepts type book
  $items['conference_document/autocomplete/%'] = array(
    'title' => 'Autocomplete for concepts',
    'page callback' => '_concept_autocomplete',
    'access callback' => 'user_is_logged_in',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK
  );

  $items['co_author/autocomplete'] = array(
    'title' => 'Autocomplete for Co-Authors ',
    'page callback' => '_co_author_autocomplete',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK
  );

  $items['admin/config/banrep'] = array(
    'title' => 'Banco de la República',
    'description' => 'Investigaciones económicas',
    'position' => 'left',
    'weight' => 100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer banrep'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/banrep/search'] = array(
    'title' => 'Buscador',
    'description' => 'Configuración del buscador del portal',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('banrep_core_search_settings_form'),
    'access arguments' => array('administer settings'),
    'file' => 'banrep_core.admin.inc',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/banrep/profile'] = array(
    'title' => t('Profile Setting'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('banrep_core_profile_setting_form'),
    'access arguments' => array('administer settings'),
    'description' => t('Set up private fields for researchers.'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['dashboard'] = array(
    'title' => '',
    'page callback' => 'banrep_core_dashboard_page',
    'page arguments' => array(),
    'access callback' => 'user_is_logged_in',
    'file' => 'banrep_core.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['publications'] = array(
    'title' => '',
    'page callback' => 'banrep_core_publications_page',
    'page arguments' => array(),
    'access callback' => 'user_is_logged_in',
    'file' => 'banrep_core.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['seminarios'] = array(
    'title' => '',
    'page callback' => 'banrep_core_seminarios_page',
    'page arguments' => array(),
    'access callback' => TRUE,
    'file' => 'banrep_core.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['profile'] = array(
    'title' => '',
    'page callback' => 'banrep_core_profile_page',
    'page arguments' => array(),
    'access callback' => 'user_is_logged_in',
    'file' => 'banrep_core.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['save_like_to_user'] = array(
    'title' => '',
    'page arguments' => array(),
    'page callback' => 'banrep_core_save_like_to_user',
    'access callback' => true,
    'file' => 'banrep_core.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['profile/%user'] = array(
    'title' => '',
    'page callback' => 'banrep_core_profile_page',
    'page arguments' => array(1),
    'access callback' => true,
    'file' => 'banrep_core.pages.inc',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );

  $items['profile/%'] = array(
    'title' => '',
    'page callback' => 'banrep_core_profile_page',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
    'access callback' => true,
    'file' => 'banrep_core.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['profile/edit'] = array(
    'title' => '',
    'page callback' => 'banrep_core_profile_edit_page',
    'page arguments' => array(),
    'access callback' => 'user_is_logged_in',
    'file' => 'banrep_core.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['profile/publications/add'] = array(
    'title' => '',
    'page callback' => 'banrep_core_publications_add_page',
    'page arguments' => array(),
    'access callback' => 'user_is_logged_in',
    'file' => 'banrep_core.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['profile/publications/edit/%'] = array(
    'title' => '',
    'page callback' => 'banrep_core_publications_edit_page',
    'page arguments' => array(),
    'access callback' => 'user_is_logged_in',
    'file' => 'banrep_core.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['profile/group/%'] = array(
    'title' => '',
    'page callback' => 'banrep_core_group_edit_page',
    'page arguments' => array(2),
    'access callback' => 'user_is_logged_in',
    'file' => 'banrep_core.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['profile/group/%'] = array(
    'title' => '',
    'page callback' => 'banrep_core_group_edit_page',
    'page arguments' => array(2),
    'access callback' => 'user_is_logged_in',
    'file' => 'banrep_core.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['profile/blogs/add'] = array(
    'title' => '',
    'page callback' => 'banrep_core_blogs_add_page',
    'page arguments' => array(),
    'access callback' => 'user_is_logged_in',
    'file' => 'banrep_core.pages.inc',
    'type' => MENU_CALLBACK,
  );


  $items['profile/article/add'] = array(
    'title' => '',
    'page callback' => 'banrep_core_article_add_page',
    'page arguments' => array(),
    'access callback' => 'user_is_logged_in',
    'file' => 'banrep_core.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['profile/article/%'] = array(
    'title' => '',
    'page callback' => 'banrep_core_article_edit_page', // passing the nid as the page argument
    'page arguments' => array(2),
    'access callback' => 'user_is_logged_in',
    // this ensures file field proper functionality on node edit form
    'file path' => drupal_get_path('module', 'node'),
    'file' => 'node.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['profile/blogs/%'] = array(
    'title' => '',
    'page callback' => 'banrep_core_blogs_edit_page',
    'page arguments' => array(2),
    'access callback' => 'user_is_logged_in',
    // this ensures file field proper functionality on node edit form
    'file path' => drupal_get_path('module', 'node'),
    'file' => 'node.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['profile/save-order'] = array(
    'title' => '',
    'page callback' => 'banrep_core_dashboard_save_order_page',
    'page arguments' => array(),
    'access callback' => 'user_is_logged_in',
    'file' => 'banrep_core.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['publication/promote'] = array(
    'title' => '',
    'page callback' => 'banrep_core_promote_publication_page',
    'page arguments' => array(),
    'access callback' => 'user_is_logged_in',
    'file' => 'banrep_core.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['research-group/save-order'] = array(
    'title' => '',
    'page callback' => 'banrep_core_research_group_save_order_page',
    'page arguments' => array(),
    'access callback' => 'user_is_logged_in',
    'file' => 'banrep_core.pages.inc',
    'type' => MENU_CALLBACK,
  );

  $items['profile/send-mail/%'] = array(
      'title' => 'Send mail for user locked mail',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_user_send_mail_custom', 2),
      'access arguments' => array('access content'),
      'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function banrep_core_init() {
  if (arg(0) == 'node' && arg(2) == 'edit') {
    $node = node_load(arg(1));
    if ($node->type == 'publication') {
      if (isset($_GET['destination'])) {
        unset($_GET['destination']);
        drupal_goto('profile/publications/edit/' . arg(1));
      }
    }
  }
  elseif (arg(0) == 'node' && arg(1) == 'add' && arg(2) == 'publication') {
    drupal_goto('profile/publications/add');
  }
  elseif (arg(0) === 'taxonomy' && arg(1) === 'term') {
    if (menu_get_object('taxonomy_term', 2)->vid === '2') {
      drupal_add_library('system', 'ui.accordion');
      drupal_add_js(
        drupal_get_path('module', 'banrep_core') . '/js/research_group_recent_publications.js',
        'file'
      );
    }
  }
}

/**
* Implements hook_webform_select_options_info().
*/
function banrep_core_webform_select_options_info() {
  $items = array();
  $items['soluciones_caie_servicios'] = array(
    'title' => t('Soluciones CAIE - Servicios'),
    'options callback' => 'webform_options_soluciones_caie_servicios',
  );
  return $items;
}

/**
* Webform options info callback.
*/
function webform_options_soluciones_caie_servicios(){
  $query = db_select('field_data_field_titulo','t')->distinct();
  $query->condition('t.bundle', 'field_portafolio_servicios');
  $query->condition('t.entity_type', 'field_collection_item');
  $query->fields('t', array('field_titulo_value'));
  $services = $query->execute()->fetchCol();
  $options = array();
  if(!empty($services) && is_array($services)){
    foreach ($services as $key => $service_name) {
      $machine_name = human_to_machine($service_name);
      $options[$machine_name] = $service_name;
    }
  }
  return $options;
}

/**
* Entrada de Blog edit page
*/
function banrep_core_blogs_edit_page($nid){
    module_load_include('inc', 'node', 'node.pages');
    global $user;
    drupal_set_title('Editar Entrada de Blog');
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    $breadcrumb[] = '<span>Blog</span>';
    $breadcrumb[] = '<span>Editar Entrada de Blog</span>';
    // Set Breadcrumbs
    drupal_set_breadcrumb($breadcrumb);
    // initialize output variable
    // $nid is the nid for the node you want to open in edit form
    $node = node_load($nid);
    if(isset($node->uid) && isset($user->uid) && ($node->uid == $user->uid) ){
        module_load_include('inc', 'node', 'node.pages');
        $add_form = drupal_get_form('blog_node_form', $node);
         // render add event form
        $output .= '<section class="form-edit-blog"><div class="form-wrapper">' . drupal_render($add_form) . '</div></section>';
        return $output;
    }else{
        drupal_access_denied();
    }
}

/**
* Seminarios edit page
*/
function banrep_core_article_edit_page($nid){
    module_load_include('inc', 'node', 'node.pages');
    global $user;
    drupal_set_title('Edit New');
    $breadcrumb = array();
    $breadcrumb[] = l('Home', '<front>');
    $breadcrumb[] = '<span>'.t('New').'</span>';
    $breadcrumb[] = '<span>'.t('Edit').'</span>';
    // Set Breadcrumbs
    drupal_set_breadcrumb($breadcrumb);
   // $nid is the nid for the node you want to open in edit form
    $node = node_load($nid);
    if(isset($node->uid) && isset($user->uid) && ($node->uid == $user->uid) ){
        module_load_include('inc', 'node', 'node.pages');
        $add_form = drupal_get_form('article_node_form', $node);
         // render add event form
        $output .= '<section class="form-edit-noticia"><div class="form-wrapper">' . drupal_render($add_form) . '</div></section>';
        return $output;
    }else{
      drupal_access_denied();
    }
}

/*
 * Implements hook_page_alter().
*/
function banrep_core_page_alter(&$page) {
    $term = menu_get_object('taxonomy_term', 2);
    if(isset($term->vid) && ($term->vid == 2)){
      unset($page['content']['system_main']['nodes']);
    }

    if(drupal_get_path_alias(current_path()) == 'publicaciones' || drupal_get_path_alias(current_path()) == 'publications'){
      drupal_add_js(drupal_get_path('module', 'banrep_core') . '/js/publications_page.js');
      drupal_add_library('system', 'ui.accordion');
    }

    if( isset($term->vid) && ($term->vid == 12) ){
      drupal_add_js(drupal_get_path('module', 'banrep_core') . '/js/solucion_caie.js');
      drupal_add_library('system', 'ui.accordion');
    }
}

/*
* hook_path_breadcrumbs_view_alter
*/
function banrep_core_path_breadcrumbs_view_alter(&$breadcrumb, $path_breadcrumb, $contexts){
  if(is_array($breadcrumb) && !empty($breadcrumb)){
    foreach ($breadcrumb as $key => $item) {
      $breadcrumb[$key] = htmlspecialchars_decode($item);
    }
  }
}

/**
 * Implements hook_theme().
 */
function banrep_core_theme($existing, $type, $theme, $path) {
  return array(
    'banrep_user_top_zone' => array(
      'file' => 'banrep_core.theme.inc',
      'variables' => array('user' => NULL),
    ),
    'home_dspace_block' => array(
      'file' => 'banrep_core.theme.inc',
      'variables' => array('content' => NULL),
    ),
    'home_koha_block' => array(
      'file' => 'banrep_core.theme.inc',
      'variables' => array('content' => NULL),
    ),
    'home_most_views' => array(
      'file' => 'banrep_core.theme.inc',
      'variables' => array('content' => NULL),
    ),
    'banrep_user_login_pass' => array(
      'template' => 'templates/banrep-login-pass',
      'variables' => array(
        'login_form' => NULL,
        'pass_form' => NULL,
      ),
    ),
    'banrep_core_soluciones_caie' => array(
      'template' => 'templates/soluciones-caie',
      'variables' => array('soluciones_caie' => NULL,),
    ),
    'banrep_core_dashboard' => array(
      'template' => 'templates/dashboard',
      'variables' => array('mis_soluciones_caie' => NULL,),
    ),
    'banrep_core_profile_edit' => array(
      'template' => 'templates/profile-edit',
      'variables' => array('account' => NULL,),
    ),
    'search_form' => array(
      'template' => 'templates/search-form',
      'variables' => array(),
    ),
    'user_info_format' => array(
      'template' => 'templates/user-info-format',
      'variables' => array('user' => NULL),
    ),
    'user_info_format_full' => array(
      'template' => 'templates/user-info-format-full',
      'variables' => array('user' => NULL, 'color' => NULL),
    ),
    'banrep_core_profile' => array(
      'template' => 'templates/profile',
      'variables' => array('user_data' => NULL, 'profile_info_order' => NULL),
    ),
    'banrep_core_profile_profile-info' => array(
      'template' => 'templates/profile-info',
      'variables' => array('user_data' => NULL),
    ),
    'banrep_core_research_group_members_info' => array(
      'template' => 'templates/research-group-members-info',
      'variables' => array('term' => NULL, 'content' => NULL, 'color' => NULL),
    ),
    'banrep_core_research_group_recent_publications' => array(
      'template' => 'templates/research-group-recent-publications',
      'variables' => array('term' => NULL),
    ),
    'banrep_core_research_group_events' => array(
      'template' => 'templates/research-group-events',
      'variables' => array('term' => NULL),
    ),
    'banrep_core_research_group_blogs' => array(
      'template' => 'templates/research-group-blogs',
      'variables' => array('term' => NULL),
    ),
    'banrep_core_profile_contact-information' => array(
      'template' => 'templates/profile-contact-information',
      'variables' => array('user_data' => NULL),
    ),
    'banrep_core_profile_perfiles-academicos' => array(
      'template' => 'templates/profile-perfiles-academicos',
      'variables' => array('user_data' => NULL),
    ),
    'banrep_core_profile_redes-sociales' => array(
      'template' => 'templates/profile-redes-sociales',
      'variables' => array('user_data' => NULL),
    ),
    'banrep_core_profile_hoja-vida' => array(
      'template' => 'templates/profile-hoja-vida',
      'variables' => array('user_data' => NULL),
    ),
    'banrep_core_profile_statistical-information' => array(
      'template' => 'templates/profile-statistical-information',
      'variables' => array('user_data' => NULL),
    ),
    'banrep_core_profile_perfil' => array(
      'template' => 'templates/profile-perfil',
      'variables' => array('user_data' => NULL),
    ),
    'banrep_core_profile_estudios-realizados' => array(
      'template' => 'templates/profile-estudios-realizados',
      'variables' => array('user_data' => NULL),
    ),
    'banrep_core_profile_publicaciones' => array(
      'template' => 'templates/profile-publicaciones',
      'variables' => array('user_data' => NULL),
    ),
    'banrep_core_profile_otras_actividades_academicas' => array(
      'template' => 'templates/profile-otras-actividades-academicas',
      'variables' => array('user_data' => NULL),
    ),
    'banrep_core_profile_coautores' => array(
      'template' => 'templates/profile-coautores',
      'variables' => array('user_data' => NULL),
    ),
    'banrep_core_profile_otros_coautores' => array(
      'template' => 'templates/profile-otros-coautores',
      'variables' => array('user_data' => NULL),
    ),
    'banrep_core_setting_engines_search' => array(
      'file'      => 'banrep_core.admin.inc',
      'render element' => 'form',
    ),
    'caie_solutions_term' => array(
      'template' => 'templates/banrep-core-term',
      'variables' => array( 'items' => NULL, 'current_term' => NULL ),
    ),
    'caie_solutions' => array(
      'file' => 'banrep_core.pages.inc',
      'variables' => array('items' => NULL),
    ),
    'caie_numbers' => array(
      'file' => 'banrep_core.pages.inc',
      'variables' => array('items' => NULL),
    ),
    'caie_resources' => array(
      'file' => 'banrep_core.pages.inc',
      'variables' => array('items' => NULL),
    ),
    'caie_collaborators' => array(
      'file' => 'banrep_core.pages.inc',
      'variables' => array('items' => NULL),
    ),
    'banrep_core_profile_trabajos_en_curso' => array(
      'template' => 'templates/profile-trabajos-en-curso',
      'variables' => array('user_data' => NULL),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function banrep_core_block_info() {

  $blocks['br_search_form'] = array(
    'info' => t('Search Form Banrep'),
    'cache' => DRUPAL_NO_CACHE
  );

  $blocks['br_user_top_zone'] = array(
    'info' => t('User Top Zone '),
    'cache' => DRUPAL_NO_CACHE
  );

  $blocks['br_login_pass'] = array(
    'info' => t('User Login / Reset '),
    'cache' => DRUPAL_NO_CACHE
  );

  $blocks['caie_solutions'] = array(
    'info' => t('CAIE Solutions'),
    'cache' => DRUPAL_NO_CACHE
  );

  $blocks['caie_numbers'] = array(
    'info' => t('CAIE Numbers'),
    'cache' => DRUPAL_NO_CACHE
  );

  $blocks['caie_resources'] = array(
    'info' => t('CAIE Resources'),
    'cache' => DRUPAL_NO_CACHE
  );

  $blocks['caie_collaborators'] = array(
    'info' => t('CAIE Collaborators'),
    'cache' => DRUPAL_NO_CACHE
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function banrep_core_block_view($delta = '') {
  $block = array();

  global $language;

  switch ($delta) {
    case 'br_search_form':
      drupal_add_js('https://support.ebscohost.com/eit/scripts/ebscohostsearch.js', 'external');
      drupal_add_js(drupal_get_path('module', 'banrep_core').'/js/ebscohostsearch.js');
      $block['subject'] = t('');
      $block['content'] = theme('search_form'); // drupal_get_form('banrep_core_search_block_form');
      break;
    case 'br_user_top_zone':
      global $user;
      $block['subject'] = t('');
      $block['content'] = theme('banrep_user_top_zone', array('user' => $user));
      break;

    case 'br_login_pass':
      $output = array();
      if(!user_is_logged_in()){
        module_load_include('inc', 'user', 'user.pages');
        $lf = drupal_get_form('user_login');
        $pf = drupal_get_form('user_pass');
        $login_form = drupal_render($lf);
        $pass_form = drupal_render($pf);
        $variables = array(
          'login_form' => $login_form,
          'pass_form' => $pass_form,
        );
        $output = theme('banrep_user_login_pass', $variables);
      }
      $block['subject'] = t('');
      $block['content'] = $output;
      break;

    case 'caie_solutions':
      $block['subject'] = ''; // t('Solutions');
      $soluciones_caie = _banrep_core_translate_taxonomy(SOLUCIONES_CAIE_VID);
      $block['content'] = theme('caie_solutions', array('items' => $soluciones_caie));
      break;

    case 'caie_numbers':
      $block['subject'] = t('Numbers');
      $soluciones_caie = taxonomy_get_tree($vid = CIFRAS_CAIE_VID, $parent = 0, $max_depth = NULL, $load_entities = TRUE);
      shuffle($soluciones_caie);
      $block['content'] = theme('caie_numbers', array('items' => $soluciones_caie));
      break;

    case 'caie_resources':
      $block['subject'] = t('Resources');
      $soluciones_caie = _banrep_core_translate_taxonomy(RECURSOS_CAIE_VID);
      $block['content'] = theme('caie_resources', array('items' => $soluciones_caie));
      break;

    case 'caie_collaborators':
      $block['subject'] = t('Collaborators');
      $soluciones_caie = _banrep_core_translate_taxonomy(COLABORADORES_CAIE_VID);
      $block['content'] = theme('caie_collaborators', array('items' => $soluciones_caie));
      break;

  }
  return $block;
}

/**
* Implements Banrep Soluciones Caie
*/
function banrep_soluciones_caie($current_term){
  $soluciones_caie = _banrep_core_translate_taxonomy(SOLUCIONES_CAIE_VID);
  $caie_solutions = theme( 'caie_solutions_term', array('items' => $soluciones_caie, 'current_term' => $current_term) );
  return $caie_solutions;
}

/**
 * Implements hook_user_insert().
 */
function banrep_core_user_insert(&$edit, $account, $category) {
  if(in_array('investigador', $account->roles)){
    cache_clear_all($cid = 'glossary_investigadores', 'cache');
  }
}

/**
 * Implements hook_user_update().
 */
function banrep_core_user_update(&$edit, $account, $category) {
  if(in_array('investigador', $account->roles)){
    cache_clear_all($cid = 'glossary_investigadores', 'cache');
  }
}

/**
* Implements hook_node_presave().
*/
function banrep_core_node_presave($node) {
  $original_node = isset($node->original)?$node->original:FALSE;
  $new_node = $node;
  if ($node->type == 'publication') {
    //$node->status = NODE_NOT_PUBLISHED;
    if ($node->is_new) {
      if (!isset($node->field_review[LANGUAGE_NONE][0]['value'])) {
        $node->field_review[LANGUAGE_NONE][0]['value'] = PUB_REVIEW_PENDING;
      }
      if ($node->field_review[LANGUAGE_NONE][0]['value'] === PUB_REVIEW_PENDING) {
        $status = t('Pendiente revisión');
      }
      else {
        $status = t('Revisado');
      }
      $message =
        t('Nueva Publicación ingresada, con el estado: ') .
        '<strong>' .
          $status .
        '</strong>.' .
        ' ' .
        t('Publicación') .
        ': ' .
        $node->title
      ;
      if (!isset($node->nid) ) {
        if(isset($node->uid)){
          user_watchdog($node->uid, t('Publicación'), $message, $severity = WATCHDOG_NOTICE);
        }else{
          user_watchdog(934, t('Publicación'), $message, $severity = WATCHDOG_NOTICE);

        }
       
      }
    }
  }
  elseif ($node->type == 'pub_user') {
    $node->status = NODE_NOT_PUBLISHED;
    // Publicar la publicación del usuario, aprobada
    $estado_publicacion = '';
    if (isset($node->field_estado_publicaci_n[LANGUAGE_NONE][0]['workflow']['workflow_sid'])) {
      $estado_publicacion = $node->field_estado_publicaci_n[LANGUAGE_NONE][0]['workflow']['workflow_sid'];
    }
    elseif (isset($node->field_estado_publicaci_n[LANGUAGE_NONE][0]['value'])) {
      $estado_publicacion = $node->field_estado_publicaci_n[LANGUAGE_NONE][0]['value'];
    }
    if ($estado_publicacion === '3') {
      $node->status = NODE_PUBLISHED;
    }
  }
  elseif ($node->type == 'blog') {
    if (user_has_role(ADMIN_GRUPO_RID)) {
      $node->status = NODE_PUBLISHED;
    }
  }
}

/**
* Implements hook_validate().
*/
function banrep_core_node_validate($node, $form, &$form_state) {
  switch ($node->type) {
    case 'publication':
      module_load_include('int', 'banrep_core', 'banrep_core.functions');
      _banrep_core_validate_external_authors($node);
      break;
    case 'pub_user':
      $publication = node_load($node->field_publicacion[LANGUAGE_NONE][0]['target_id']);
      if ($publication->field_review[LANGUAGE_NONE][0]['value'] !== PUB_REVIEW_REVIEWED) {
        form_set_error(
          'field_publicacion',
          t(
            'La publicación <a href="@url" target="_blank">@name</a> aún no ha sido revisada',
            array(
              '@url'=>url(node_uri($publication)['path'].'/edit'),
              '@name'=>$publication->title,
            )
          )
        );
      }
      break;
  }
}

/**
* Get Services Form Nids
*/
function _get_services_form_nids(){
  return variable_get('SERVICES_FORM_NIDS', array(SERVICES_FORM_NID_1, SERVICES_FORM_NID_2, SERVICES_FORM_NID_3, SERVICES_FORM_NID_4, SERVICES_FORM_NID_5, SERVICES_FORM_NID_6, SERVICES_FORM_NID_7, SERVICES_FORM_NID_8, SERVICES_FORM_NID_9));
}

/**
*  Asignar puntaje de acuerdo al concepto de la publicación
*/
function _assign_score_according_to_publication_concept($uid, $concept_nid, $publication_nid, $publication_title){
  $concept = node_load($concept_nid);
  $user = user_load($uid);
  if( ($user != FALSE) && ($concept != FALSE) && (isset($concept->field_concept_category[LANGUAGE_NONE][0]['tid'])) ){
    $concept_category_tid = $concept->field_concept_category[LANGUAGE_NONE][0]['tid'];
    $concept_category = taxonomy_term_load($concept_category_tid);
    if( isset($concept_category->vid) && ($concept_category->vid = 13) ){
      $current_user_scoring = isset($user->field_score[LANGUAGE_NONE][0]['value'])? intval($user->field_score[LANGUAGE_NONE][0]['value']):0;
      $scoring = $current_user_scoring;
      $scoring_for_researcher = 0;
      $scoring_for_technical = 0;
      $is_researcher = FALSE;
      $is_technical = FALSE;

      // Puntaje Ruta Investigación
      if(isset($concept_category->field_scr_researcher[LANGUAGE_NONE][0]['value']) && !empty($concept_category->field_scr_researcher[LANGUAGE_NONE][0]['value'])){
        $scoring_for_researcher = intval($concept_category->field_scr_researcher[LANGUAGE_NONE][0]['value']);
      }
      // Puntaje Ruta Técnica
      if(isset($concept_category->field_scr_technical[LANGUAGE_NONE][0]['value']) && !empty($concept_category->field_scr_technical[LANGUAGE_NONE][0]['value'])){
        $scoring_for_technical = intval($concept_category->field_scr_technical[LANGUAGE_NONE][0]['value']);
      }

      if(isset($user->roles)){
        if(in_array("investigador", $user->roles)){
          $is_researcher = TRUE;
        }
        if(in_array("tecnico", $user->roles)){
          $is_technical = TRUE;
        }
      }


      if($is_researcher){
          $scoring = $scoring + $scoring_for_researcher;
      }

      if($is_technical){
          $scoring = $scoring + $scoring_for_technical;
      }

      if($scoring != $current_user_scoring){
        $user->field_score[LANGUAGE_NONE][0]['value'] = $scoring;
        user_save($user);

        $link = l($publication_title, 'node/' .  $publication_nid , array('options' => array('absolute' => TRUE)));
        $message = '';
        if($is_researcher){
          $message = 'Puntaje Ruta Investigación Incrementados a: ' . $scoring . '. Para pa publicación: ' . $link . '. De acuerdo al concepto de la publicación: ' . $concept_category->name . ' | ' . $concept->title . ".";
        }
        if($is_technical){
          $message = 'Puntaje Ruta Técnica Incrementados a: ' . $scoring . '. Para pa publicación: ' . $link . '. De acuerdo al concepto de la publicación: ' . $concept_category->name . ' | ' . $concept->title . ".";
        }
        user_watchdog($uid, t('Publicación'), $message, $severity = WATCHDOG_NOTICE);
      }
    }
  }
}

/**
* Asignar Puntaje De Acuerdo Al Rol En La Publicación
*/
function _assign_score_according_to_role_within_publication($uid, $role_within_publication, $publication_nid, $publication_title){
  $user = user_load($uid);
  if($user != FALSE){
    $current_user_scoring = isset($user->field_score[LANGUAGE_NONE][0]['value'])? intval($user->field_score[LANGUAGE_NONE][0]['value']):0;
    $scoring = $current_user_scoring;
    $scoring_for_researcher = 0;
    $scoring_for_technical = 0;
    $is_researcher = FALSE;
    $is_technical = FALSE;
    $role = taxonomy_term_load($role_within_publication);
    // Puntaje Ruta Investigación
    if(isset($role->field_scr_researcher[LANGUAGE_NONE][0]['value']) && !empty($role->field_scr_researcher[LANGUAGE_NONE][0]['value'])){
      $scoring_for_researcher = intval($role->field_scr_researcher[LANGUAGE_NONE][0]['value']);
    }
    // Puntaje Ruta Técnica
    if(isset($role->field_scr_technical[LANGUAGE_NONE][0]['value']) && !empty($role->field_scr_technical[LANGUAGE_NONE][0]['value'])){
      $scoring_for_technical = intval($role->field_scr_technical[LANGUAGE_NONE][0]['value']);
    }

    if(isset($user->roles)){
      if(in_array("investigador", $user->roles)){
        $is_researcher = TRUE;
      }
      if(in_array("tecnico", $user->roles)){
        $is_technical = TRUE;
      }
    }

    if($is_researcher){
        $scoring = $scoring + $scoring_for_researcher;
    }

    if($is_technical){
        $scoring = $scoring + $scoring_for_technical;
    }

    if($scoring != $current_user_scoring){
      $user->field_score[LANGUAGE_NONE][0]['value'] = $scoring;
      user_save($user);

      $link = l($publication_title, 'node/' .  $publication_nid , array('options' => array('absolute' => TRUE)));
      $message = '';
      if($is_researcher){
        $message = 'Puntaje Ruta Investigación Incrementados a: ' . $scoring . '. Para la publicación: ' . $link . '. De acuerdo al rol en la publicación: ' . $role->name;
      }
      if($is_technical){
        $message = 'Puntaje Ruta Técnica Incrementados a: ' . $scoring . '. Para la publicación: ' . $link . '. De acuerdo al rol en la publicación: ' . $role->name;
      }
      user_watchdog($uid, t('Publicación'), $message, $severity = WATCHDOG_NOTICE);
    }
  }
}

/*
* Logs a system user message.
*/
function user_watchdog($uid = "" , $type = "", $message = "", $severity = WATCHDOG_NOTICE){
  if(!empty($uid) && is_numeric($uid)){
    $user = user_load($uid);
    if($user != FALSE){
      $log = array();
      $log['value'] = '<strong>' . t("Fecha: ") . '</strong>' .  date('F j, Y, g:i a', time()) . '.<br/>' . '<strong>' . t("Categoría: ") . '</strong>' . $type . '.'  . '<br/>' . '<strong>' . t('Cambios: ') . '</strong>' . $message;
      if(isset($user->field_log[LANGUAGE_NONE]) && is_array($user->field_log[LANGUAGE_NONE]) && !empty($user->field_log[LANGUAGE_NONE])){
        $log['format'] = 'rich_text';
        $user->field_log[LANGUAGE_NONE][] = $log;
      }else{
        $user->field_log[LANGUAGE_NONE][0] = $log;
        $user->field_log[LANGUAGE_NONE][0]['format'] = 'rich_text';
      }
      user_save($user);
    }
  }
}

/*
* Get Publication Status Label
*/
function _get_publication_status_label($status_key = ""){
  $label = "";
  switch ($status_key) {
    case '17':
      $label = t("Publicación Relacionada");
      break;
    case '2':
      $label = t("Pendiente Aprobación");
      break;
    case '3':
      $label = t("Aprobado");
      break;
    case '4':
      $label = t("No Aprobado");
      break;
    default:
      # code...
      break;
  }
  return $label;
}

/**
* Publication Status Has Changed
*/
function _publication_review_has_changed($original_node, $new_node){
  if(isset($original_node->field_review[LANGUAGE_NONE][0]['value']) && isset($new_node->field_review[LANGUAGE_NONE][0]['value'])){
    $new_status = $new_node->field_review[LANGUAGE_NONE][0]['value'];
    $old_status = $original_node->field_review[LANGUAGE_NONE][0]['value'];
    if($new_status != $old_status){
      return TRUE;
    }
  }
  return FALSE;
}

/**json
* Publication Review Has Changed
*/
function _publication_status_has_changed($original_node, $new_node){
  if(isset($original_node->field_estado_publicaci_n[LANGUAGE_NONE][0]['value']) && isset($new_node->field_estado_publicaci_n[LANGUAGE_NONE][0]['workflow']['workflow_sid'])){
    $new_status = $new_node->field_estado_publicaci_n[LANGUAGE_NONE][0]['workflow']['workflow_sid'];
    $old_status = $original_node->field_estado_publicaci_n[LANGUAGE_NONE][0]['value'];
    if($new_status != $old_status){
      return TRUE;
    }
  }
  return FALSE;
}

/**
* Publicación Camabiada de Relacionada a Pendiente de Aprobación.
*/
function _publication_was_changed_to_pending_approval($original_node, $new_node){
  if(_publication_status_has_changed($original_node, $new_node)){
    if( isset($new_node->field_estado_publicaci_n[LANGUAGE_NONE][0]['workflow']['workflow_sid']) && isset($original_node->field_estado_publicaci_n[LANGUAGE_NONE][0]['value']) && ($original_node->field_estado_publicaci_n[LANGUAGE_NONE][0]['value'] == 17) && ($new_node->field_estado_publicaci_n[LANGUAGE_NONE][0]['workflow']['workflow_sid'] == 2) ){
      return TRUE;
    }
  }
  return FALSE;
}

/**
* Publication was approved
*/
function _publication_was_approved($original_node, $new_node){
  if(_publication_status_has_changed($original_node, $new_node)){
    if( isset($new_node->field_estado_publicaci_n[LANGUAGE_NONE][0]['workflow']['workflow_sid']) && ($new_node->field_estado_publicaci_n[LANGUAGE_NONE][0]['workflow']['workflow_sid'] == 3) ){
      return TRUE;
    }
  }
  return FALSE;
}

/**
* Publication was NOT approved
*/
function _publication_was_not_approved($original_node, $new_node){
  if(_publication_status_has_changed($original_node, $new_node)){
    if( isset($new_node->field_estado_publicaci_n[LANGUAGE_NONE][0]['workflow']['workflow_sid']) && ($new_node->field_estado_publicaci_n[LANGUAGE_NONE][0]['workflow']['workflow_sid'] == 4) ){
      return TRUE;
    }
  }
  return FALSE;
}

/**
*  Update Review In Child Publications
*/
function _update_review_in_child_publications($parent_nid = "", $review_value = ""){
  if(!empty($parent_nid) && !empty($review_value)){
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'publication')
      ->fieldCondition('field_source', 'target_id', $parent_nid);
    $result = $query->execute();
    $news_items = array();
    if (isset($result['node'])) {
      $news_items_nids = array_keys($result['node']);
      $news_items = entity_load('node', $news_items_nids);
    }
    if(count($news_items)>0){
      foreach ($news_items as $key => $publication) {
        $publication->field_review[LANGUAGE_NONE][0]['value'] = $review_value;
        node_save($publication);
      }
    }
  }
}

/**
*  Update Review In Child Publications
*/
function _update_review_in_parent_publications($parent_nid = "", $review_value = ""){
  $publication = node_load($parent_nid);
  if( $publication->type == 'publication' ){
    $publication->field_review[LANGUAGE_NONE][0]['value'] = $review_value;
    node_save($publication);
  }
}


/*
* Implements hook_taxonomy_term_update().
*/
function banrep_core_taxonomy_term_update($term) {
  if( $term->vid ==  VID_GRUPOS_INVESTIGACION){
    // members.
    $term_tid = $term->tid;
    $clean_research_group_members = clean_research_group_members($term_tid);
    if( isset($term->field_members[LANGUAGE_NONE]) && is_array($term->field_members[LANGUAGE_NONE]) && !empty($term->field_members[LANGUAGE_NONE]) ){
      $users =  $term->field_members[LANGUAGE_NONE];
      foreach ($users as $key => $target_id) {
        $result = banrep_core_set_relate_user_to_research_group($target_id['target_id'], $term_tid);
      }
    }
  }
}

/*
* Get glossary recursos
*/
function get_glossary_recursos($tid){
    $data = '<div class="abecedario uno"><div class="item-list"><ul class="links inline">';
    $items = array();

    $_query_parameters = drupal_get_query_parameters();
    $items[] = '<li>' . l('Todos -', current_path()) . '</li>';
    foreach (range('A', 'Z') as $letter) {
        $show_letter = get_glossary_recursos_starts_with($letter, $tid);
        if($show_letter){
          $_query_parameters['alphabetically'] = strtolower($letter);
          $items[] = '<li>' . l($letter, current_path(), array('query' => $_query_parameters)) . '</li>';
        }else{
          $items[] = '<li><span class="no-click">'.$letter.'</span></li>';
        }
    }

    if(count($items) > 0){
      $data .= implode("", $items);
    }
    $data .= '</ul></div></div>';
    return $data;
}

function get_glossary_recursos_starts_with($letter, $tid = FALSE){

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'recurso')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->propertyCondition('title', $letter, 'STARTS_WITH');

  if($tid != FALSE){
    $query->fieldCondition('field_resource_type', 'tid', $tid);
  }

  $query->range(0, 10);

  $result = $query->execute();
  if (isset($result['node'])) {
    $users = array_keys($result['node']);
    if(count($users) > 0){
      return TRUE;
    }
  }

  return FALSE;

}

/*
* Get glossary investigadores
*/
function get_glossary_investigadores(){
  $query = array();
  $get_params['nombre'] = (isset($_GET['nombre'])) ? $_GET['nombre']: NULL;
  $get_params['linea'] = (isset($_GET['linea'])) ? $_GET['linea']: NULL;
  $get_params['city'] = (isset($_GET['city'])) ? $_GET['city']: NULL;

  if(empty($get_params['nombre']) && empty($get_params['linea']) && empty($get_params['city'])){
    $get_params = array();
  }

    global $language ;
    $lang_name = $language->language;
    $path_page = ($lang_name == 'es') ? 'investigadores' : 'researchers';
    $data = '<div class="abecedario"><div class="item-list"><ul class="links inline">';
    $items = array();
    $uids = get_all_investigadores();
    if(count($uids) > 0){
      if(!empty($get_params)){
        $url_all = l(t('All'), $path_page, array('query' => array($get_params)));
      }
      else {
        $url_all = l(t('All'), $path_page);
      }
      $url_all = l(t('All'), $path_page, $get_params);
      $items[] = '<li>' . $url_all . '</li>';
      foreach (range('A', 'Z') as $letter) {
          $show_letter = get_glossary_investigadores_starts_with($letter, $uids);
          if($show_letter){
            if(!empty($get_params)){
              $url_letter = l($letter, $path_page.'/'.strtolower($letter), array('query' => array($get_params)));
            }
            else {
              $url_letter = l($letter, $path_page.'/'.strtolower($letter));
            }
            $items[] = '<li>'. $url_letter .'</li>';
          }else{
            $items[] = '<li><span class="no-click">'.$letter.'</span></li>';
          }
      }
      if(count($items) > 0){
        $data .= implode("", $items);
      }
    $data .= '</ul></div></div>';
    return $data;
  }
}

/*
* Get glossary investigadores
*/
function get_glossary_investigadores_starts_with($letter, $uids){
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'user');
    $query->propertyCondition('uid', $uids, 'IN');
    $query->propertyCondition('status', 1);
    $query->fieldCondition('field_surnames', 'value', $letter, 'STARTS_WITH');
    $result = $query->execute();
    if (isset($result['user'])) {
      $users = array_keys($result['user']);
      if(count($users) > 0){
        return TRUE;
      }
    }
    return FALSE;
}

/*
* Gell all the invetigadores
*/
function get_all_investigadores(){
  $query = 'SELECT DISTINCT(ur.uid)
    FROM {users_roles} AS ur
    WHERE ur.rid IN (:rids)';
  $result = db_query($query, array(':rids' => array(INVESTIGADOR_RID)));

  $uids = $result->fetchCol();
  return $uids;
}

/*
* Set Relate User To Research Group
*/
function clean_research_group_members($term_tid = ''){
  if(!empty($term_tid) && is_numeric($term_tid) ){
    $num_deleted = db_delete('field_data_field_research_group')->condition('bundle', 'user')->condition('field_research_group_tid', $term_tid)->execute();
    return $num_deleted;
  }
  return FALSE;
}

/*
* Set Relate User To Research Group
*/
function banrep_core_set_relate_user_to_research_group($uid = '', $term_tid) {
  if (!empty($uid) && !empty($term_tid)) {
    $user_fields = user_load($uid);
    if ($user_fields) {
      $grupo_investigacion = array();
      if (isset($user_fields->field_research_group[LANGUAGE_NONE])) {
        $grupo_investigacion = $user_fields->field_research_group[LANGUAGE_NONE];
      }
      $grupo_investigacion[] = array('tid' => $term_tid);
      $items = array();
      $grupos = array();
      foreach ($grupo_investigacion as $item) {
        if (!in_array($item['tid'], $items)) {
          $grupos[] = array('tid' => $item['tid']);
          $items[] = $item['tid'];
        }
      }
      $user_fields->field_research_group[LANGUAGE_NONE] = $grupos;
      user_save($user_fields);
    }
  }
}

/*
* Implements hook_preprocess_views_view().
*/
function banrep_core_preprocess_views_view(&$vars) {
  $view = &$vars['view'];
  // Make sure it's the correct view
  if ($view->name == 'revista' && $view->current_display == 'block') {
    // add needed javascript
    drupal_add_js(drupal_get_path('module', 'banrep_core').'/js/banrep_revistas_recientes.js');
  }

  // Make sure it's the correct view
  if ($view->name == 'publicaciones' && $view->current_display == 'gestionar_publicaciones') {
    // add needed javascript
    drupal_add_js(drupal_get_path('module', 'banrep_core') . '/js/publicaciones_gestionar_publicaciones.js');
  }

  // Make sure it's the correct view
  if ($view->name == 'recursos_de_informacion') {
    // add needed javascript
    drupal_add_js(drupal_get_path('module', 'banrep_core') . '/js/masonry.pkgd.min.js');
    drupal_add_js(drupal_get_path('module', 'banrep_core') . '/js/page_recursos.js');
  }

}

/**
* Add autor externo form
*/
function autor_externo_add_form($form, &$form_state) {
    $form['#tree'] = TRUE;
    $form['#attributes']['class'] = 'autor_externo_add_form';

    $form['names'] = array(
      '#type' => 'textfield',
      '#title' => t('Nombres'),
      '#required' => TRUE,
      '#default_value' => '',
      '#description' => t(''),
      '#size' => 60,
      '#maxlength' => 128,
      '#prefix' => '<div class="row"><div class="col-md-12">',
      '#suffix' => '</div></div>',
    );

    $form['surnames'] = array(
      '#type' => 'textfield',
      '#title' => t('Apellidos'),
      '#required' => TRUE,
      '#default_value' => '',
      '#description' => t(''),
      '#size' => 60,
      '#maxlength' => 128,
      '#prefix' => '<div class="row"><div class="col-md-12">',
      '#suffix' => '</div></div>',
    );

    $form['filiacion'] = array(
      '#type' => 'textfield',
      '#title' => t('Filiation'),
      '#required' => FALSE,
      '#default_value' => '',
      '#description' => t(''),
      '#size' => 60,
      '#maxlength' => 128,
      '#prefix' => '<div class="row"><div class="col-md-12">',
      '#suffix' => '</div></div>',
    );

    $form['orcid'] = array(
      '#type' => 'textfield',
      '#title' => t('Orcid'),
      '#default_value' => '',
      '#description' => t(''),
      '#size' => 60,
      '#maxlength' => 128,
      '#prefix' => '<div class="row"><div class="col-md-12">',
      '#suffix' => '</div></div>',
    );

    $ajax = array(
        'callback' => 'autor_externo_add_form_ajax_submit',
        'wrapper' => '',
        'effect' => 'fade',
        'progress' => array(
            'type' => 'throbber',
            'message' => NULL,
        ),
        'event' => 'click',
    );

    // form submit
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Registrar Co-autor.'),
      '#prefix' => '<div class="row"><div class="col-md-12">',
      '#suffix' => '</div></div>',
       '#ajax' => $ajax,
    );

    return $form;
}

/**
* Implements form ajax submit.
*/
function autor_externo_add_form_ajax_submit($form, &$form_state){
    global $user;
    // Get the form values
    $values = isset($form_state['values']) ? $form_state['values'] : FALSE;
    $names = isset($values['names']) ? $values['names'] : '';
    $surnames = isset($values['surnames']) ? $values['surnames'] : '';
    $filiacion = isset($values['filiacion']) ? $values['filiacion'] : '';
    $orcid = isset($values['orcid']) ? $values['orcid'] : '';
    $msg = '';
    $response = new stdClass();
    $response->success = FALSE;
    $response->is_valid = FALSE;
    $response->message = $msg;
    // Validations
    if ($names !== '' && $surnames !== '') {
      $response->is_valid = TRUE;
    }
    // Save Autor Externo
    if ($response->is_valid) {
      $term = new stdClass();
      $term->name = $surnames . ' ' . $names;
      $term->vid = 16;
      $term->field_names[LANGUAGE_NONE][0]['value'] = $names;
      $term->field_surnames[LANGUAGE_NONE][0]['value'] = $surnames;
      if($filiacion){
        $term->field_filiacion[LANGUAGE_NONE][0]['value'] = $filiacion;
      }
      if($orcid){
        $term->field_orcid[LANGUAGE_NONE][0]['value'] = $orcid;
      }
      $term->field_review[LANGUAGE_NONE][0]['value'] = PUB_REVIEW_PENDING;
      taxonomy_term_save($term);
      if (isset($term->tid)) {
        $response->success = TRUE;
        $response->name = $term->name . ' (' . $term->tid . ')';
      }
    }
    return array(
        '#type' => 'ajax',
        '#commands' => array(
            array(
              'command' => 'responseAutorExternoAddForm',
              'data' => $response,
              'msg' =>$msg
            ),
        ),
    );
}

/**
* Add Vinculo form
*/
function vinculo_add_form($form, &$form_state) {

    $form['#tree'] = TRUE;
    $form['#attributes']['class'] = 'vinculo_add_form';
    $form['indice'] = array(
      '#type' => 'textfield',
      '#title' => t('Indice'),
      '#default_value' => '',
      '#description' => t(''),
      '#size' => 60,
      '#maxlength' => 128,
      '#prefix' => '<div class="row"><div class="col-md-12">',
      '#suffix' => '</div></div>',
    );

    $form['url'] = array(
      '#type' => 'textfield',
      '#title' => t('URL'),
      '#default_value' => '',
      '#description' => t(''),
      '#size' => 60,
      '#maxlength' => 128,
      '#prefix' => '<div class="row"><div class="col-md-12">',
      '#suffix' => '</div></div>',
    );

    $ajax = array();

    // form submit
    $form['query']['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Guardar Vínculo',
      '#prefix' => '<div class="row"><div class="col-md-12">',
      '#suffix' => '</div></div>',
      '#ajax' => $ajax,
    );

    return $form;
}

function _get_concepts($concept_category_parent = NULL, $concept_category_child = NULL, $concept_source = NUL, $name = NULL, $format = 'autocomplete', $limit = 4, $flag = FALSE){
  global $user;

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'concept');

  if(!is_null($name)){
    $query->propertyCondition('title', '%' . db_like($name) . '%', 'LIKE');
  }

  if(!is_null($concept_source)){
    if($concept_source == 'externo'){
      $query->propertyCondition('uid', $user->uid);
    }
    $query->fieldCondition('field_concept_source', 'value', $concept_source, '=');
  }

  if(!is_null($concept_category_parent)){
    $query->fieldCondition('field_concept_category', 'tid', $concept_category_parent, '=', 0);
  }

  if(!is_null($concept_category_child)){
    $query->fieldCondition('field_concept_category', 'tid', $concept_category_child, '=', 1);
  }

  if($limit != -1){
   $query->range(0, 4);
  }

  $matches = [];

  $result = $query->execute();

  if (isset($result['node'])) {
    $items_nids = array_keys($result['node']);
    $items = entity_load('node', $items_nids);
    foreach ($items as $key => $item) {
      $option = $item->title . ' (' . $item->nid . ')';
      if($format == 'autocomplete'){
         $matches[$option] = $option;
       }else{
         $matches[$item->nid] = $item->title;
       }
    }
  }

  return $matches;
}

/**
* Autocomplete for concepts
* autocomplete helper
* $string = string for search
*/
function _concept_autocomplete($type_parent, $type_child, $string){
  $matches = [];
  // Conceptos del usuario.
  $matches += _get_concepts($type_parent, $type_child, $source = 'externo', $name = $string);
  // Conceptos del sistema.
  $matches += _get_concepts($type_parent, $type_child, $source = 'sistema', $name = $string);
  // Return the result to the form in json
  drupal_json_output($matches);
}

/**
* Autocomplete for concepts
* autocomplete helper
* $string = string for search
*/
function _book_chapter_concept_autocomplete($type_parent, $string){
  $type_child = NULL;
  $matches = [];
  // Conceptos del usuario.
  $matches += _get_concepts($type_parent, $type_child, $source = 'externo', $name = $string);
  // Conceptos del sistema.
  $matches += _get_concepts($type_parent, $type_child, $source = 'sistema', $name = $string);
  // Return the result to the form in json
  drupal_json_output($matches);
}

/**
* Autocomplete for Co-Author
* autocomplete helper
* $string = string for search
*/
function _co_author_autocomplete($string){
  global $user;
  $matches = [];
  if( strlen($string) > 3 ){
    // Registered users
    //$matches += _get_users_suggestion_by_name($string);
    // Un-registered users.
    $matches += _get_other_co_author_suggestion_by_name($string);
  }
  // Return the result to the form in json
  drupal_json_output($matches);
}

/**
* Get users Sugestion by name
*/
function _get_users_suggestion_by_name($name = ''){
  $matches = [];
  if(!empty($name)){
    $query = db_select('users', 'u');
    $query->leftJoin('users_roles', 'ur', 'u.uid = ur.uid');
    $query->leftJoin('field_data_field_full_name', 'n', 'u.uid = n.entity_id');
    // $query->condition('u.status', 1);
    $query->condition('ur.rid', array(4,5), 'IN'); // Rol Investigador, Técnico
    $query->condition('n.field_full_name_value', '%' . db_like($name) . '%', 'LIKE');
    $query->fields('u');
    $query->fields('n', array('field_full_name_value'));
    $users = $query->execute()->fetchAll();
    foreach ($users as $k => $u) {
      $label = $u->field_full_name_value . ' (' . $u->uid . ')';
      $matches[$label] = $label;
    }
  }
  return $matches;
}

/**
* Get other co author suggestion by name
*/
function _get_other_co_author_suggestion_by_name($name = ''){
  $matches = [];
  if(!empty($name)){
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'taxonomy_term')
      ->entityCondition('bundle', array('autores_externos'))
      ->propertyCondition('name', '%' . db_like($name) . '%', 'LIKE')
      ->range(0, 3);
    $result = $query->execute();
    if(isset($result['taxonomy_term'])){
      $tids = array_keys($result['taxonomy_term']);
      $terms = taxonomy_term_load_multiple($tids);
      foreach ($terms as $key => $term) {
        $matches[$term->name . '(' . $term->tid . ')'] = $term->name . '(' . $term->tid . ')';
      }
    }
  }
  return $matches;
}

// ---------------  AJAX CALLBACK  FUNCTIONS FOR FIELDs -----------------

/**
 * Submit handler for the "add-one-more" button.
 *
 * Increments the max counter and causes a rebuild.
 */
function co_author_add_more_callback($form, &$form_state) {

    
    if (!isset($form_state['num_co_author'])) {
        $form_state['num_co_author'] = 0;
        $form_state['num_co_author']++;
    }

    $form_state['num_co_author']++;
    $form_state['rebuild'] = TRUE;
    
}

function jel_add_more_callback($form, &$form_state) {
    if (!isset($form_state['num_jel'])) {
        $form_state['num_jel'] = 0;
        $form_state['num_jel']++;
    }
    $form_state['num_jel']++;
    $form_state['rebuild'] = TRUE;
}

function tags_add_more_callback($form, &$form_state) {
    if (!isset($form_state['num_tags'])) {
        $form_state['num_tags'] = 0;
        $form_state['num_tags']++;
    }
    $form_state['num_tags']++;
    $form_state['rebuild'] = TRUE;
}

function rl_add_more_callback($form, &$form_state) {
    if (!isset($form_state['num_rl'])) {
        $form_state['num_rl'] = 0;
        $form_state['num_rl']++;
    }
    $form_state['num_rl']++;
    $form_state['rebuild'] = TRUE;
}

function sn_add_more_callback($form, &$form_state) {
    if (!isset($form_state['num_sn'])) {
        $form_state['num_sn'] = 0;
        $form_state['num_sn']++;
    }
    $form_state['num_sn']++;
    $form_state['rebuild'] = TRUE;
}

function formation_add_more_callback($form, &$form_state) {
    if (!isset($form_state['num_formation'])) {
        $form_state['num_formation'] = 0;
        $form_state['num_formation']++;
    }
    $form_state['num_formation']++;
    $form_state['rebuild'] = TRUE;
}

function acp_add_more_callback($form, &$form_state) {
    if (!isset($form_state['num_acp'])) {
        $form_state['num_acp'] = 0;
        $form_state['num_acp']++;
    }
    $form_state['num_acp']++;
    $form_state['rebuild'] = TRUE;
}

function er_add_more_callback($form, &$form_state) {
    if (!isset($form_state['num_er'])) {
        $form_state['num_er'] = 0;
        $form_state['num_er']++;
    }
    $form_state['num_er']++;
    $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for the "remove one" button.
 *
 * Decrements the max counter and causes a form rebuild.
 */

function co_author_remove_one_callback($form, &$form_state) {
  if ($form_state['num_co_author'] > 1) {
    $form_state['num_co_author']--;
  }
  $form_state['rebuild'] = TRUE;
}

function jel_remove_one_callback($form, &$form_state) {
  if ($form_state['num_jel'] > 1) {
    $form_state['num_jel']--;
  }
  $form_state['rebuild'] = TRUE;
}

function tags_remove_one_callback($form, &$form_state) {
  if ($form_state['num_tags'] > 1) {
    $form_state['num_tags']--;
  }
  $form_state['rebuild'] = TRUE;
}

function rl_remove_one_callback($form, &$form_state) {
  if ($form_state['num_rl'] > 1) {
    $form_state['num_rl']--;
  }
  $form_state['rebuild'] = TRUE;
}

function sn_remove_one_callback($form, &$form_state) {
  if ($form_state['num_sn'] > 1) {
    $form_state['num_sn']--;
  }
  $form_state['rebuild'] = TRUE;
}

function formation_remove_one_callback($form, &$form_state) {
  if ($form_state['num_formation'] > 1) {
    $form_state['num_formation']--;
  }
  $form_state['rebuild'] = TRUE;
}

function acp_remove_one_callback($form, &$form_state) {
  if ($form_state['num_acp'] > 1) {
    $form_state['num_acp']--;
  }
  $form_state['rebuild'] = TRUE;
}

function er_remove_one_callback($form, &$form_state) {
  if ($form_state['num_er'] > 1) {
    $form_state['num_er']--;
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Callback for both ajax-enabled buttons.
 *
 * Selects and returns the fieldset with the co-author in it.
 */
function co_author_callback($form, $form_state) {
    return $form['query']['right_column']['co_author_fieldset'];
}

function jel_callback($form, $form_state) {
    return $form['query']['left_column']['fieldset_jel'];
}

function tags_callback($form, $form_state) {
    return $form['query']['left_column']['fieldset_tags'];
}

function rl_callback($form, $form_state) {
    return $form['fieldset_rl'];
}

function sn_callback($form, $form_state) {
    return $form['fieldset_sn'];
}

function formation_callback($form, $form_state) {
    return $form['fieldset_formation'];
}

function acp_callback($form, $form_state) {
    return $form['fieldset_acp'];
}

function er_callback($form, $form_state) {
    return $form['fieldset_er'];
}

/**
* Profile Description Form
*/
function profile_description_form($form, &$form_state, $account = NULL){
   $form['#tree'] = TRUE;
   $form['#attributes']['class'] = 'profile_description_form';
   $form['field_perfil'] = array(
    '#title' => t('Academic profile'),
    '#type' => 'text_format',
    '#format' => 'rich_text',
    '#description' => t(''),
    '#default_value' => get_input_value_from_account($account, 'field_perfil'),
  );
  $form['field_perfil_ingles'] = array(
    '#title' => t('Academic profile (English)'),
    '#type' => 'text_format',
    '#format' => 'rich_text',
    '#description' => t(''),
    '#default_value' => get_input_value_from_account($account, 'field_perfil_ingles'),
  );
  $ajax = array(
      'callback' => 'profile_description_form_ajax_submit',
      'wrapper' => '',
      'effect' => 'fade',
      'progress' => array(
          'type' => 'throbber',
          'message' => NULL,
      ),
      'event' => 'click',
  );
  // form submit
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#prefix' => '<div class="row"><div class="col-md-12">',
    '#suffix' => '</div></div>',
     '#ajax' => $ajax,
  );
  return $form;
}

/**
* Implements form ajax submit.
*/
function profile_description_form_ajax_submit($form, &$form_state){
  global $user;

  // Get the form values
  $values = isset($form_state['values']) ? $form_state['values'] : FALSE;
  $field_perfil = isset($values['field_perfil']['value'])?$values['field_perfil']['value']: '';
  $field_perfil_ingles = isset($values['field_perfil_ingles']['value'])?$values['field_perfil_ingles']['value']: '';
  $msg = t('Your changes have been successfully saved!');
  $response = new stdClass();
  $response->success = FALSE;
  $response->is_valid = TRUE;
  $response->message = $msg;

  if($response->is_valid){
    $user_fields = user_load($user->uid);
    $user_fields->field_perfil[LANGUAGE_NONE][0]['value'] = $field_perfil;
    $user_fields->field_perfil[LANGUAGE_NONE][0]['format'] = 'rich_text';
    $user_fields->field_perfil_ingles[LANGUAGE_NONE][0]['value'] = $field_perfil_ingles;
    $user_fields->field_perfil_ingles[LANGUAGE_NONE][0]['format'] = 'rich_text';
    user_save($user_fields);
    $response->success = TRUE;
  }

  return array(
      '#type' => 'ajax',
      '#commands' => array(
          array('command' => 'responseProfileDescriptionForm', 'data' => $response, 'msg' =>$msg),
      ),
  );

}

/**
* Profile investigation lines Form
*/
function profile_investigation_lines_form($form, &$form_state, $account = NULL){
  $form['#tree'] = TRUE;
  $form['#attributes']['class'] = 'profile_investigation_lines_form';
  $default_values = get_input_value_from_account($account, $field_name = 'rls', array());
  $count_default_values =  count($default_values);

  if (empty($form_state['num_rl'])) {
    if($count_default_values > 0){
      $form_state['num_rl'] = $count_default_values;
    }else{
      $form_state['num_rl'] = 1;
    }
  }

  $count_rl = $form_state['num_rl'];
  $multiple_rl = ($count_rl > 1);

  // File rl form element starts
  $form['fieldset_rl'] = array(
      '#type' => 'fieldset',
      '#title' => t('Investigation Lines'),
      '#prefix' => '<div id="fieldset-wrapper-rl" class="fieldset-wrapper-rl margin-fieldset">',
      '#suffix' => '</div>',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
  );

  for ($i = 0; $i < $count_rl; $i++) {
    $form['fieldset_rl']['rl'][$i] = array(
      '#type' => 'textfield',
      '#title' => t('Line'),
      '#size' => 60,
      '#maxlength' => 250,
      '#autocomplete_path' => 'taxonomy/autocomplete/field_research_lines',
      '#default_value' => isset($default_values[$i]) ? $default_values[$i] : '',
      '#prefix' => '<div class="row"><div class="col-md-12">',
      '#suffix' => '</div></div>',
    );
  }

  $form['fieldset_rl']['add_rl'] = array(
      '#type' => 'submit',
      '#value' => '+ ' . t('Add Investigation lines'),
      '#submit' => array('rl_add_more_callback'),
      '#limit_validation_errors' => array(),
      '#ajax' => array(
          'callback' => 'rl_callback',
          'wrapper' => 'fieldset-wrapper-rl',
      ),
  );

  // Remove
  if ($multiple_rl) {
    $form['fieldset_rl']['remove_rl'] = array(
        '#type' => 'submit',
        '#value' => '- ' . t('Remove Investigation lines'),
        '#submit' => array('rl_remove_one_callback'),
        '#limit_validation_errors' => array(),
        '#ajax' => array(
            'callback' => 'rl_callback',
            'wrapper' => 'fieldset-wrapper-rl',
        ),
    );
  }
  $ajax = array(
      'callback' => 'profile_investigation_lines_form_ajax_submit',
      'wrapper' => '',
      'effect' => 'fade',
      'progress' => array(
          'type' => 'throbber',
          'message' => NULL,
      ),
      'event' => 'click',
  );

  // form submit
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#prefix' => '<div class="row"><div class="col-md-12">',
    '#suffix' => '</div></div>',
     '#ajax' => $ajax,
  );

  return $form;
}

/**
* Implements form ajax submit.
*/
function profile_investigation_lines_form_ajax_submit($form, &$form_state){
  global $user;
  // Get the form values
  $values = isset($form_state['values']) ? $form_state['values'] : FALSE;
  $fieldset_rl  = ( isset($values['fieldset_rl']['rl']) && !empty($values['fieldset_rl']['rl']) )? $values['fieldset_rl']['rl'] : FALSE;
  $msg = t('Your changes have been successfully saved!');
  $response = new stdClass();
  $response->success = FALSE;
  $response->is_valid = TRUE;
  $response->message = $msg;

  if($response->is_valid){
    $user_fields = user_load($user->uid);
    $news_values = array();
    foreach ($fieldset_rl as $key => $item) {
      $tid = _get_investigation_line_tid_by_name($item);
      if($tid != FALSE){
        $news_values[] = array('tid' => $tid);
      }
    }
    $user_fields->field_research_lines[LANGUAGE_NONE] = $news_values;
    user_save($user_fields);
    $response->success = TRUE;
  }
  return array(
      '#type' => 'ajax',
      '#commands' => array(
          array('command' => 'responseInvestigationLinesForm', 'data' => $response, 'msg' =>$msg),
      ),
  );
}

/**
* Profile social networks Form
*/
function profile_social_networks_form($form, &$form_state, $account = NULL){
  $form['#tree'] = TRUE;
  $form['#attributes']['class'] = 'profile_social_networks_form';
  $default_values = get_input_value_from_account($account, $field_name = 'sns', array());
  $count_default_values = count($default_values);

  if (empty($form_state['num_sn'])) {
    if($count_default_values > 0){
      $form_state['num_sn'] = $count_default_values;
    }else{
      $form_state['num_sn'] = 1;
    }
  }

  $count_sn = $form_state['num_sn'];
  $multiple_sn = ($count_sn > 1);

  // File sn form element starts
  $form['fieldset_sn'] = array(
      '#type' => 'fieldset',
      '#title' => t('Social networks'),
      '#prefix' => '<div id="fieldset-wrapper-sn" class="fieldset-wrapper-sn margin-fieldset">',
      '#suffix' => '</div>',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
  );

  for ($i = 0; $i < $count_sn; $i++) {
     // container.
    $container = array();
    $container_name = 'container';
    $container[$container_name] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'social-network-item',
        ),
      ),
    );

    $container[$container_name]['social_network'] = array(
      '#type' => 'select',
      '#title' => t('Name'),
      '#options' => get_social_network_type_options(),
      '#default_value' => isset($default_values[$i]['name']) ? $default_values[$i]['name'] : '',
      '#description' => t(''),
      '#prefix' => '<ul class="list-inline"><li>',
      '#suffix' => '</li>',
    );

    $container[$container_name]['url'] = array(
      '#type' => 'textfield',
      '#title' => t('Url'),
      '#default_value' => isset($default_values[$i]['url']) ? $default_values[$i]['url'] : '',
      '#description' => t(''),
      '#prefix' => '<li>',
      '#suffix' => '</li></ul>',
    );

    $form['fieldset_sn']['sn'][$i] = $container;

  }

  $form['fieldset_sn']['add_sn'] = array(
      '#type' => 'submit',
      '#value' => '+ ' . t('Add Social Network'),
      '#submit' => array('sn_add_more_callback'),
      '#limit_validation_errors' => array(),
      '#ajax' => array(
          'callback' => 'sn_callback',
          'wrapper' => 'fieldset-wrapper-sn',
      ),
  );

  // Remove
  if ($multiple_sn) {
    $form['fieldset_sn']['remove_sn'] = array(
        '#type' => 'submit',
        '#value' => '- ' . t('Remove Social Network'),
        '#submit' => array('sn_remove_one_callback'),
        '#limit_validation_errors' => array(),
        '#ajax' => array(
            'callback' => 'sn_callback',
            'wrapper' => 'fieldset-wrapper-sn',
        ),
    );
  }

  $ajax = array(
      'callback' => 'profile_social_networks_form_ajax_submit',
      'wrapper' => '',
      'effect' => 'fade',
      'progress' => array(
          'type' => 'throbber',
          'message' => NULL,
      ),
      'event' => 'click',
  );

  // form submit
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#prefix' => '<div class="row"><div class="col-md-12">',
    '#suffix' => '</div></div>',
     '#ajax' => $ajax,
  );

  return $form;
}

/**
* Implements form ajax submit.
*/
function profile_social_networks_form_ajax_submit($form, &$form_state){
  global $user;
  // Get the form values
  $values = isset($form_state['values']) ? $form_state['values'] : FALSE;
  $fieldset_sn  = ( isset($values['fieldset_sn']['sn']) && !empty($values['fieldset_sn']['sn']) )? $values['fieldset_sn']['sn'] : FALSE;
  $msg = t('Your changes have been successfully saved!');
  $response = new stdClass();
  $response->success = FALSE;
  $response->is_valid = TRUE;
  $response->message = $msg;
  if($response->is_valid){
    $user_fields = user_load($user->uid);
    // Delete field collection items.
    $field_collection_item_values = array();
    if(!empty($user_fields->field_social_networks[LANGUAGE_NONE])){
      foreach ($user_fields->field_social_networks[LANGUAGE_NONE] as $key => $value) {
        $field_collection_item_values[] = $value['value'];
        // Unset them.
        unset($user_fields->field_social_networks[LANGUAGE_NONE][$key]);
      }
      if(!empty($field_collection_item_values)){
        // Delete field collection items.
        entity_delete_multiple('field_collection_item', $field_collection_item_values);
        user_save($user_fields);
      }
    }
    // Create News Values.
    $news_values = array();
    foreach ($fieldset_sn as $key => $item) {
      $url = isset($item['container']['url'])?$item['container']['url']:'';
      $tid = isset($item['container']['social_network'])?$item['container']['social_network']:'';
      if(!empty($url) && !empty($tid)){
        $raw_user = user_load($user->uid);
        $collection = entity_create('field_collection_item', array('field_name' => 'field_social_networks'));
        // Attach to the user
        $collection->setHostEntity('user', $raw_user);
        $collection->field_url[LANGUAGE_NONE][0]['url'] = $url;
        $collection->field_social_network[LANGUAGE_NONE][0]['tid'] = $tid;
        // Save field-collection item.
        $collection->save(TRUE);
        // Now save the node
        user_save($raw_user);
      }
    }
    $response->success = TRUE;
  }

  return array(
      '#type' => 'ajax',
      '#commands' => array(
          array('command' => 'responseSocialNetworksForm', 'data' => $response, 'msg' =>$msg),
      ),
  );
}

/**
* Profile formation Form
*/
function profile_formation_form($form, &$form_state, $account = NULL){
  $form['#tree'] = TRUE;
  $form['#attributes']['class'] = 'profile-formation-form';
  $default_values = get_input_value_from_account($account, $field_name = 'profile_formation', array());
  $count_default_values = count($default_values);

  if (empty($form_state['num_formation'])) {
    if($count_default_values > 0){
      $form_state['num_formation'] = $count_default_values;
    }else{
      $form_state['num_formation'] = 1;
    }
  }

  $count_formation = $form_state['num_formation'];
  $multiple_formation = ($count_formation > 1);

  // File sn form element starts
  $form['fieldset_formation'] = array(
      '#type' => 'fieldset',
      '#title' => t('Formation'),
      '#prefix' => '<div id="fieldset-wrapper-formation" class="fieldset-wrapper-formation margin-fieldset">',
      '#suffix' => '</div>',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
  );

  for ($i = 0; $i < $count_formation; $i++) {
     // container.
    $container = array();
    $container_name = 'container';
    $container[$container_name] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'formation-item',
        ),
      ),
    );

    $container[$container_name]['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#default_value' => isset($default_values[$i]['title']) ? $default_values[$i]['title'] : '',
      '#description' => t(''),
      '#prefix' => '<ul class="list-inline"><li>',
      '#suffix' => '</li>',
    );

    $container[$container_name]['university'] = array(
      '#type' => 'textfield',
      '#title' => t('University'),
      '#default_value' => isset($default_values[$i]['university']) ? $default_values[$i]['university'] : '',
      '#description' => t(''),
      '#prefix' => '<li>',
      '#suffix' => '</li>',
    );


    $date = format_date(REQUEST_TIME, 'custom', 'Y-m-d H:i:s');


    $container[$container_name]['fecha_inicio'] = array(
      '#type' => 'date_popup',
      '#date_label_position' => 'none',
      '#title' => t('Fecha inicio'),
      '#date_format' => 'Y-m-d',
      '#date_year_range' => '-30:+1',
      '#default_value' => isset($default_values[$i]['fecha_inicio']) ?format_date($default_values[$i]['fecha_inicio'], 'custom', 'Y-m-d H:i:s'): '',
      '#description' => t(''),
      '#prefix' => '<li>',
      '#suffix' => '</li>',
    );
    $container[$container_name]['fecha_fin'] = array(
      '#type' => 'date_popup',
      '#date_label_position' => 'none',
      '#title' => t('Fecha fin'),
      '#date_format' => 'Y-m-d',
      '#date_year_range' => '-30:+1',
      '#default_value' => isset($default_values[$i]['fecha_fin']) ?format_date($default_values[$i]['fecha_fin'], 'custom', 'Y-m-d H:i:s'): '',
      '#description' => t(''),
      '#prefix' => '<li>',
      '#suffix' => '</li>',
    );
    $lugares = array(''=>'Seleccionar');
    $lugares += list_allowed_values(field_info_field('field_lugar_posgrado'));
    $container[$container_name]['lugar'] = array(
      '#type' => 'select',
      '#title' => t('Lugar'),
      '#options' => $lugares,
      '#default_value' => isset($default_values[$i]['lugar']) ? $default_values[$i]['lugar'] : '',
      '#description' => t(''),
      '#prefix' => '<li>',
      '#suffix' => '</li>',
    );

    $levels = list_allowed_values(field_info_field('field_nivel_estudio'));
    $container[$container_name]['level_study'] = array(
      '#type' => 'select',
      '#options' => $levels,
      '#title' => t('Level of study'),
      '#default_value' => isset($default_values[$i]['level_study']) ? $default_values[$i]['level_study'] : '',
      '#description' => t(''),
      '#prefix' => '<li>',
      '#suffix' => '</li></ul>',
    );

    $form['fieldset_formation']['formation'][$i] = $container;

  }

  $form['fieldset_formation']['add_formation'] = array(
      '#type' => 'submit',
      '#value' => '+ ' . t('Add Formation'),
      '#submit' => array('formation_add_more_callback'),
      '#limit_validation_errors' => array(),
      '#ajax' => array(
          'callback' => 'formation_callback',
          'wrapper' => 'fieldset-wrapper-formation',
      ),
  );

  // Remove
  if ($multiple_formation) {
    $form['fieldset_formation']['remove_formation'] = array(
        '#type' => 'submit',
        '#value' => '- ' . t('Remove Formation'),
        '#submit' => array('formation_remove_one_callback'),
        '#limit_validation_errors' => array(),
        '#ajax' => array(
            'callback' => 'formation_callback',
            'wrapper' => 'fieldset-wrapper-formation',
        ),
    );
  }

  $ajax = array(
      'callback' => 'profile_formation_form_ajax_submit',
      'wrapper' => '',
      'effect' => 'fade',
      'progress' => array(
          'type' => 'throbber',
          'message' => NULL,
      ),
      'event' => 'click',
  );

  // form submit
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#prefix' => '<div class="row"><div class="col-md-12">',
    '#suffix' => '</div></div>',
     '#ajax' => $ajax,
  );


  drupal_add_js(drupal_get_path('module', 'banrep_core').'/js/profile_plan_carreras.js', 'file');

  return $form;
}

function banrep_core_date_popup_process($element, $form_state, $complete_form) {
      unset($element['date']['#description']);
      unset($element['date']['#title']);
      return $element;
}
function banrep_core_element_info_alter(&$type) {
  if (isset($type['date_popup'])) {
    $type['date_popup']['#process'][] = 'banrep_core_date_popup_process';
  }
}


function profile_formation_form_ajax_submit($form, &$form_state){
  global $user;
  // Get the form values
  $values = isset($form_state['values']) ? $form_state['values'] : FALSE;
  $fieldset_formation  = FALSE;
  if ( isset($values['fieldset_formation']['formation']) && !empty($values['fieldset_formation']['formation']) ) {
    $fieldset_formation = $values['fieldset_formation']['formation'];
  }
  $msg = t('Your changes have been successfully saved!');
  $response = new stdClass();
  $response->success = FALSE;
  $response->is_valid = TRUE;
  $response->message = $msg;
  if($response->is_valid){
    $user_fields = user_load($user->uid);
    // Delete field collection items.
    $field_collection_item_values = array();
    if(!empty($user_fields->field_studies_carried_out[LANGUAGE_NONE])){
      foreach ($user_fields->field_studies_carried_out[LANGUAGE_NONE] as $key => $value) {
        $field_collection_item_values[] = $value['value'];
        // Unset them.
        unset($user_fields->field_studies_carried_out[LANGUAGE_NONE][$key]);
      }
      if(!empty($field_collection_item_values)){
        // Delete field collection items.
        entity_delete_multiple('field_collection_item', $field_collection_item_values);
        user_save($user_fields);
      }
    }
    // Create News Values.
    $news_values = array();
    foreach ($fieldset_formation as $key => $item) {
      $title       = isset($item['container']['title']) ? $item['container']['title'] : '';
      $university  = isset($item['container']['university']) ? $item['container']['university'] : '';
      $year        = isset($item['container']['year']) ? $item['container']['year'] : '';
      $level_study = isset($item['container']['level_study']) ? $item['container']['level_study'] : '';
      $fecha_ini   = isset($item['container']['fecha_inicio'])? strtotime($item['container']['fecha_inicio']):'';
      $fecha_fin   = isset($item['container']['fecha_fin'])? strtotime($item['container']['fecha_fin']):'';
      $tipo        = isset($item['container']['tipo'])?$item['container']['tipo']:'';
      $lugar       = isset($item['container']['lugar'])?$item['container']['lugar']:'';

      if (!empty($title) && !empty($university) && !empty($year) && !empty($level_study)) {
        $raw_user = user_load($user->uid);
        $collection = entity_create('field_collection_item', array('field_name' => 'field_studies_carried_out'));
        // Attach to the user
        $collection->setHostEntity('user', $raw_user);
        $collection->field_titulo[LANGUAGE_NONE][0]['value']               = $title;
        $collection->field_university[LANGUAGE_NONE][0]['value']           = $university;
        $collection->field_year[LANGUAGE_NONE][0]['value']                 = $year;
        $collection->field_nivel_estudio[LANGUAGE_NONE][0]['value']        = $level_study;
        $collection->field_fecha_inicio_estudio[LANGUAGE_NONE][0]['value'] = $fecha_ini;
        $collection->field_fecha_fin_estudio[LANGUAGE_NONE][0]['value']    = $fecha_fin;
        $collection->field_tipo_posgrado[LANGUAGE_NONE][0]['value']        = $tipo;
        $collection->field_lugar_posgrado[LANGUAGE_NONE][0]['value']       = $lugar;
        // Save field-collection item.
        $collection->save(TRUE);
        // Now save the node
        user_save($raw_user);
      }
    }
    $response->success = TRUE;
  }

  return array(
      '#type' => 'ajax',
      '#commands' => array(
          array('command' => 'responseFormationForm', 'data' => $response, 'msg' => $msg),
      ),
  );
}


/**
* Profile academic profiles Form
*/
function profile_academic_profiles_form($form, &$form_state, $account = NULL){
  $form['#tree'] = TRUE;
  $form['#attributes']['class'] = 'academic-profiles-form';
  $default_values = get_input_value_from_account($account, $field_name = 'profile_academic_info', array());
  $count_default_values = count($default_values);

  if (empty($form_state['num_acp'])) {
    if($count_default_values > 0){
      $form_state['num_acp'] = $count_default_values;
    }else{
      $form_state['num_acp'] = 1;
    }
  }

  $count_acp = $form_state['num_acp'];
  $multiple_formation = ($count_acp > 1);

  // File sn form element starts
  $form['fieldset_acp'] = array(
      '#type' => 'fieldset',
      '#title' => t('Academic profiles'),
      '#prefix' => '<div id="fieldset-wrapper-acp" class="fieldset-wrapper-acp margin-fieldset">',
      '#suffix' => '</div>',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
  );

  for ($i = 0; $i < $count_acp; $i++) {
     // container.
    $container = array();
    $container_name = 'container';
    $container[$container_name] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'formation-item',
        ),
      ),
    );

    $container[$container_name]['academic_profile'] = array(
      '#type' => 'select',
      '#title' => t('Academic profile'),
      '#options' => get_academic_profiles_type_options(),
      '#default_value' => isset($default_values[$i]['academic_profile']) ? $default_values[$i]['academic_profile'] : '',
      '#description' => t(''),
      '#prefix' => '<ul class="list-inline"><li>',
      '#suffix' => '</li>',
    );

    $container[$container_name]['url'] = array(
      '#type' => 'textfield',
      '#title' => t('Url'),
      '#default_value' => isset($default_values[$i]['url']) ? $default_values[$i]['url'] : '',
      '#description' => t(''),
      '#prefix' => '<li>',
      '#suffix' => '</li></ul>',
    );


    $form['fieldset_acp']['acp'][$i] = $container;

  }

  $form['fieldset_acp']['add_acp'] = array(
      '#type' => 'submit',
      '#value' => '+ ' . t('Add Academic Profile'),
      '#submit' => array('acp_add_more_callback'),
      '#limit_validation_errors' => array(),
      '#ajax' => array(
          'callback' => 'acp_callback',
          'wrapper' => 'fieldset-wrapper-acp',
      ),
  );

  // Remove
  if ($multiple_formation) {
    $form['fieldset_acp']['remove_acp'] = array(
        '#type' => 'submit',
        '#value' => '- ' . t('Remove Academic Profile'),
        '#submit' => array('acp_remove_one_callback'),
        '#limit_validation_errors' => array(),
        '#ajax' => array(
            'callback' => 'acp_callback',
            'wrapper' => 'fieldset-wrapper-acp',
        ),
    );
  }

  $ajax = array(
      'callback' => 'profile_academic_profiles_form_ajax_submit',
      'wrapper' => '',
      'effect' => 'fade',
      'progress' => array(
          'type' => 'throbber',
          'message' => NULL,
      ),
      'event' => 'click',
  );

  // form submit
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#prefix' => '<div class="row"><div class="col-md-12">',
    '#suffix' => '</div></div>',
     '#ajax' => $ajax,
  );

  return $form;
}


function profile_academic_profiles_form_ajax_submit($form, &$form_state){
  global $user;
  // Get the form values
  $values = isset($form_state['values']) ? $form_state['values'] : FALSE;
  $fieldset_acp  = FALSE;
  if ( isset($values['fieldset_acp']['acp']) && !empty($values['fieldset_acp']['acp']) ) {
    $fieldset_acp = $values['fieldset_acp']['acp'];
  }
  $msg = t('Your changes have been successfully saved!');
  $response = new stdClass();
  $response->success = FALSE;
  $response->is_valid = TRUE;
  $response->message = $msg;
  if($response->is_valid){
    $user_fields = user_load($user->uid);
    // Delete field collection items.
    $field_collection_item_values = array();
    if(!empty($user_fields->field_academics_profiles[LANGUAGE_NONE])){
      foreach ($user_fields->field_academics_profiles[LANGUAGE_NONE] as $key => $value) {
        $field_collection_item_values[] = $value['value'];
        // Unset them.
        unset($user_fields->field_academics_profiles[LANGUAGE_NONE][$key]);
      }
      if(!empty($field_collection_item_values)){
        // Delete field collection items.
        entity_delete_multiple('field_collection_item', $field_collection_item_values);
        user_save($user_fields);
      }
    }
    // Create News Values.
    $news_values = array();
    foreach ($fieldset_acp as $key => $item) {
      $academic_profile = isset($item['container']['academic_profile']) ? $item['container']['academic_profile'] : '';
      $url = isset($item['container']['url']) ? $item['container']['url'] : '';

      if (!empty($academic_profile) && !empty($url)) {
        $raw_user = user_load($user->uid);
        $collection = entity_create('field_collection_item', array('field_name' => 'field_academics_profiles'));
        // Attach to the user
        $collection->setHostEntity('user', $raw_user);
        $collection->field_academic_profile[LANGUAGE_NONE][0]['tid'] = $academic_profile;
        $collection->field_url[LANGUAGE_NONE][0]['url'] = $url;
        // Save field-collection item.
        $collection->save(TRUE);
        // Now save the node
        user_save($raw_user);
      }
    }
    $response->success = TRUE;
  }

  return array(
      '#type' => 'ajax',
      '#commands' => array(
          array('command' => 'responseAcademicProfilesForm', 'data' => $response, 'msg' => $msg),
      ),
  );
}


/**
* Profile access data Form
*/
function profile_access_data_form($form, &$form_state, $account = NULL) {
   $form['#tree'] = TRUE;
   $form['#attributes']['class'] = 'profile_access_data_form';

   $form['profile_image'] = array(
    '#type' => 'managed_file',
    '#name' => 'profile_image',
    '#title' => t('Profile Image'),
    '#size' => 40,
    '#description' => t("The image must be less than 400 pixels of width in JPG or PNG format."),
    '#default_value' => get_input_value_from_account($account, 'profile_image'),
    '#upload_location' => 'public://pictures'
   );

   $form['password'] = array(
    '#title' => t('Password'),
    '#type' => 'password',
    '#maxlength' => 64,
    '#size' => 20,
    '#description' => t(''),
    '#default_value' => get_input_value_from_account($account, 'password'),
  );

  $form['confirm_password'] = array(
    '#title' => t('Confirm Password'),
    '#type' => 'password',
    '#maxlength' => 64,
    '#size' => 20,
    '#description' => t("To change the user's current password, type the new password in both fields."),
    '#default_value' => get_input_value_from_account($account, 'password'),
  );

  $ajax = array(
      'callback' => 'profile_access_data_form_ajax_submit',
      'wrapper' => '',
      'effect' => 'fade',
      'progress' => array(
          'type' => 'throbber',
          'message' => NULL,
      ),
      'event' => 'click',
  );
  // form submit
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#prefix' => '<div class="row"><div class="col-md-12">',
    '#suffix' => '</div></div>',
     '#ajax' => $ajax,
  );

  return $form;

}

/**
* Implements form ajax submit.
*/
function profile_access_data_form_ajax_submit($form, &$form_state){
  global $user;
  // Get the form values
  $values = isset($form_state['values']) ? $form_state['values'] : FALSE;
  $password = isset($values['password']) ? $values['password'] : FALSE;
  $confirm_password = isset($values['confirm_password']) ? $values['confirm_password'] : FALSE;
  $profile_image = isset($values['profile_image']) ? $values['profile_image'] : FALSE;
  $msg = t('Your changes have been successfully saved!');
  $response = new stdClass();
  $response->success = FALSE;
  $response->is_valid = TRUE;
  $update_pass = FALSE;
  $file = FALSE;

  if(!empty($password) && !empty($confirm_password) && ($password == $confirm_password)){
    $update_pass = TRUE;
  }

  if( !empty($profile_image) && $profile_image != FALSE ){
    $file = file_load($profile_image);
  }

  if($response->is_valid){
    $edit = array();
    if($update_pass != FALSE){
      $edit['pass'] = $password;
    }
    if($file != FALSE){
      $edit['picture'] = $file;
    }
    if(!empty($edit)){
      $user_fields = user_load($user->uid);
      user_save($user_fields, $edit);
      $response->success = TRUE;
    }
  }else{
    $msg = t('Verify Password!.');
  }

  $response->message = $msg;

  return array(
      '#type' => 'ajax',
      '#commands' => array(
          array('command' => 'responseProfileAccessDataForm', 'data' => $response, 'msg' =>$msg),
      ),
  );

}

/**
* Profile access data Form
*/
function profile_cv_form($form, &$form_state, $account = NULL) {

  $form['file'] = array(
    '#type' => 'managed_file',
    '#title' => t('CV'),
    '#progress_message' => t('Please wait...'),
    '#progress_indicator' => 'bar',
    '#description' => t('Upload a file, allowed extensions: pdf'),
    '#default_value' => get_input_value_from_account($account, 'field_cv_file'),
    '#upload_location' => 'public://cv',
    "#upload_validators"  => array(
      'file_validate_extensions' => 'pdf',
      'file_validate_unique' => array($file),
    ),
  );

  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
  );
    return $form;
}

function file_validate_unique($file) {
   $errors = array();
   $filename = $file->filename;
   if (file_exists('public://cv/' . $filename)) {
         $errors[] = t('The file could not be uploaded because a file by that name already exists in the destination directory.');
   }
   return $errors;
}

function profile_cv_form_submit($form, &$form_state) {
  global $user;

  $file = file_load($form_state['values']['file']);
  $file->filename = $file->fid . '-' . time();
  $file->status = FILE_STATUS_PERMANENT;
  file_save($file);
  file_usage_add($file, 'user', 'user', $user->uid);

  $existingUser = user_load($user->uid);
  $existingUser->field_cv_file['und'][0] = (array)$file;
  $existingUser->field_cv_file['und'][0]['display'] = 1;
  user_save($existingUser );
  drupal_set_message(t('Your CV has been updated'));
}

/**
* Get Academics Profiles Order
*/
function get_academics_profiles_order(){
  $items = array();
  $vocabulary = taxonomy_vocabulary_machine_name_load('academics_profiles');
  $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
  foreach ($terms as $key => $term) {
    if( isset($term->tid) ){
      $items[$term->tid] = '';
    }
  }
  return $items;
}

/**
* Profile Work in progress Form
*/
function profile_work_in_progress_form($form, &$form_state, $account = NULL){
  $form = array();
  $form['#tree'] = TRUE;
  $form['#attributes']['class'] = 'profile_work_in_progress_form';

  $form['field_trabajos_en_curso'] = [
    '#type' => 'container',
    '#tree' => TRUE,
    '#prefix' => '<div id="js-ajax-elements-wrapper">', '#suffix' => '</div>',
  ];

  $form_state['field_deltas'] = isset($form_state['field_deltas']) ? $form_state['field_deltas'] : $account->field_trabajos_en_curso['und'];
  $form_state['field_deltas_delete'] = isset($form_state['field_deltas_delete']) ? $form_state['field_deltas_delete'] : [];

  foreach ($form_state['field_deltas']  as $delta => $value) {
    $form['field_trabajos_en_curso'][$delta] = array(
      '#type' => 'fieldset',
      '#title' => t('Work in progress'),
    );

    $entity_id = $value['value'];
    $field = entity_load('field_collection_item',  array($entity_id));

    $form['field_trabajos_en_curso'][$delta]['id_trabajos_en_curso'] = [
      '#type' => 'hidden',
        '#value' => isset($entity_id) ? $entity_id : 0,
    ];

    $form['field_trabajos_en_curso'][$delta]['titulo_trabajo'] = array(
      '#type' => 'textfield',
      '#title' => t('Título'),
      '#size' => 60, 
      '#maxlength' => 254,
      '#default_value' => isset($field[$entity_id]->field_titulo_trabajo['und'][0]['value']) ? $field[$entity_id]->field_titulo_trabajo['und'][0]['value'] : '',
      '#prefix' => '<div class="group-item col-xs-12">', '#suffix' => '</div>',
    );

    $tags = array();
    foreach ($field[$entity_id]->field_areas_tematicas['und'] as $item) {
      $tags[$item['tid']] = isset($item['taxonomy_term']) ? $item['taxonomy_term'] : taxonomy_term_load($item['tid']);
    }

    $form['field_trabajos_en_curso'][$delta]['areas_tematicas'] = array(
      '#type' => 'textfield',
      '#title' => t('Áreas temáticas'),
      '#autocomplete_path' => 'taxonomy/autocomplete/field_areas_tematicas',
      '#size' => 60,
      '#maxlength' => 1024,
      '#default_value' => taxonomy_implode_tags($tags),
      '#prefix' => '<div class="group-item col-xs-4">', '#suffix' => '</div>',
    );

    $form['field_trabajos_en_curso'][$delta]['identificador_sepi'] = array(
      '#type' => 'textfield',
      '#title' => t('Identificador SEPI'),
      '#size' => 60, 
      '#maxlength' => 254,
      '#default_value' => isset($field[$entity_id]->field_identificador_sepi['und'][0]['value']) ? $field[$entity_id]->field_identificador_sepi['und'][0]['value'] : '',
      '#prefix' => '<div class="group-item col-xs-4">','#suffix' => '</div>',
    );

    $form['field_trabajos_en_curso'][$delta]['estado_trabajo'] = array(
      '#title' => t('Estado'),
      '#type' => 'select',
      '#options' => array(
        "" => t('- Ninguno -'),
        "publico" => t('Public'),
        "privado" => t('Privado')
      ),
      '#default_value' => isset($field[$entity_id]->field_estado_trabajo['und'][0]['value']) ? $field[$entity_id]->field_estado_trabajo['und'][0]['value'] : '',
      '#prefix' => '<div class="group-item col-xs-4">', '#suffix' => '</div>',
    );

    $form['field_trabajos_en_curso'][$delta]['objetivo_trabajo'] = array(
      '#type' => 'textarea',
      '#title' => t('Objetivo'),
      '#description' => t(''),
      '#default_value' => isset($field[$entity_id]->field_objetivo_trabajo['und'][0]['value']) ? $field[$entity_id]->field_objetivo_trabajo['und'][0]['value'] : '',
      '#prefix' => '<div class="group-item col-xs-12">', '#suffix' => '</div>',
    );

    /*$form['field_trabajos_en_curso'][$delta]['work_in_progress'] = array(
      '#title' => t('Work in progress'),
      '#type' => 'text_format',
      '#format' => 'rich_text',
      '#description' => t(''),
      '#default_value' => isset($field[$entity_id]->field_work_in_progress['und'][0]['value']) ? $field[$entity_id]->field_work_in_progress['und'][0]['value'] : '',
      '#prefix' => '<div class="group-item col-xs-12">', '#suffix' => '</div>',
    );*/

    $form['field_trabajos_en_curso'][$delta]['remove_name'] = array(
      '#type' => 'submit',
      '#value' => t('- Eliminar Trabajo en curso'),
      '#submit' => ['profile_work_in_progress_form_add_more_ajax_remove'],
      '#limit_validation_errors' => array(),
      '#ajax' => array(
        'callback' => 'profile_work_in_progress_form_add_more_ajax_callback',
        'wrapper' => 'js-ajax-elements-wrapper',
      ),
      '#attributes' => array(
        'class' => ['button-small'],
      ),
      '#name' => 'remove_name_' . $delta,
      '#prefix' => '<div class="group-item col-xs-12">', '#suffix' => '</div>',
    );
  }

  $form['field_trabajos_en_curso']['add_name'] = [
    '#type' => 'submit',
    '#value' => t('+ Añadir Trabajo en curso'),
    '#submit' => array('profile_work_in_progress_form_add_more_ajax_add'),
    '#ajax' => [
      'callback' => 'profile_work_in_progress_form_add_more_ajax_callback',
      'wrapper' => 'js-ajax-elements-wrapper',
    ],
    '#prefix' => '<div class="group-item col-xs-12">', '#suffix' => '</div>',
  ];

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#ajax' => array(
      'callback' => 'profile_work_in_progress_form_ajax_submit',
      'wrapper' => 'js-ajax-elements-wrapper',
      'effect' => 'fade',
      'progress' => array(
          'type' => 'throbber',
          'message' => NULL,
      ),
      'event' => 'click',
    ),
    '#prefix' => '<div class="row"><div class="col-md-12">', '#suffix' => '</div></div>',
  );

  return $form;
}

function profile_work_in_progress_form_ajax_submit($form, &$form_state){
  global $user;
  foreach ($form_state['field_deltas_delete'] as $key => $work) {
    $field_collection_item_value = $work['value'];
    entity_delete_multiple('field_collection_item', array($field_collection_item_value));
  }
  
  $values = isset($form_state['values']) ? $form_state['values'] : FALSE;
  foreach ($values['field_trabajos_en_curso'] as $key => $work) {
     $field_collection_item_value = $work['id_trabajos_en_curso'];
    if(is_numeric($field_collection_item_value)){
      if ($field_collection_item_value == 0) {
        $user = user_load($user->uid);
        $values['field_name'] = 'field_trabajos_en_curso';
        $entity = entity_create('field_collection_item', $values);
        $entity->setHostEntity('user', $user);
        $entity->field_titulo_trabajo[LANGUAGE_NONE][0]['value'] = isset($work['titulo_trabajo']) ? $work['titulo_trabajo'] : ''; 
        $entity->field_areas_tematicas[LANGUAGE_NONE] = taxonomy_translate_areas_tematicas($work['areas_tematicas']); 
        $entity->field_objetivo_trabajo[LANGUAGE_NONE][0]['value'] = isset($work['objetivo_trabajo']) ? $work['objetivo_trabajo'] : '';
        $entity->field_estado_trabajo[LANGUAGE_NONE][0]['value'] = isset($work['estado_trabajo']) ? $work['estado_trabajo'] : '';
        //$entity->field_work_in_progress[LANGUAGE_NONE][0]['value'] = isset($work['work_in_progress']['value']) ? $work['work_in_progress']['value'] : ''; 
        $entity->save();
        user_save($user);
      }else {
        $field_collection_value = entity_load('field_collection_item', array($field_collection_item_value));
        $field_collection_value[$field_collection_item_value]->field_titulo_trabajo[LANGUAGE_NONE][0]['value']  = isset($work['titulo_trabajo']) ? $work['titulo_trabajo'] : '';
        $field_collection_value[$field_collection_item_value]->field_areas_tematicas[LANGUAGE_NONE] = taxonomy_translate_areas_tematicas($work['areas_tematicas']);
        $field_collection_value[$field_collection_item_value]->field_objetivo_trabajo[LANGUAGE_NONE][0]['value']  = isset($work['objetivo_trabajo']) ? $work['objetivo_trabajo'] : '';
        $field_collection_value[$field_collection_item_value]->field_identificador_sepi[LANGUAGE_NONE][0]['value']  = isset($work['identificador_sepi']) ? $work['identificador_sepi'] : '';
        $field_collection_value[$field_collection_item_value]->field_estado_trabajo[LANGUAGE_NONE][0]['value']  = isset($work['estado_trabajo']) ? $work['estado_trabajo'] : '';
        //$field_collection_value[$field_collection_item_value]->field_work_in_progress[LANGUAGE_NONE][0]['value'] = isset($work['work_in_progress']['value']) ? $work['work_in_progress']['value'] : '';
        $field_collection_value[$field_collection_item_value]->save();
      }
    }
  }

  $msg = t('Your changes have been successfully saved!');
  $response = new stdClass();
  $response->success = FALSE;
  $response->is_valid = TRUE;
  $response->message = $msg;

  $response->success = TRUE;
  return array(
      '#type' => 'ajax',
      '#commands' => array(
          array('command' => 'responseWorkInProgressForm', 'data' => $response, 'msg' =>$msg),
      ),
  );
}

function taxonomy_translate_areas_tematicas($tags) {
  $areas_ids = array();
  $termes = taxonomy_vocabulary_get_names();
  $taxonomy_vid = $termes['areas_tematicas']->vid;
  $areas = explode(',', str_replace(', ', ',', $tags));

  foreach ($areas as $key => $value) {
    $areas_tematicas_terms = taxonomy_get_term_by_name($value, 'areas_tematicas');
      if(isset($areas_tematicas_terms) && !empty($areas_tematicas_terms)) {
        array_push($areas_ids, array('tid' => key($areas_tematicas_terms)));
      }else{
        $term1 = (object) array(
          'name' => $value,
          'vid' => $taxonomy_vid,
        );
        taxonomy_term_save($term1);
        array_push($areas_ids, array('tid' => key(taxonomy_get_term_by_name($value, 'areas_tematicas')) ));
      }
  }
  return $areas_ids;
}

function profile_work_in_progress_form_add_more_ajax_callback($form, $form_state) {
  return $form['field_trabajos_en_curso'];
}

function profile_work_in_progress_form_add_more_ajax_add($form, &$form_state) {
  $form_state['field_deltas'][] = array('value' => 0);
  $form_state['rebuild'] = TRUE;
}

function profile_work_in_progress_form_add_more_ajax_remove($form, &$form_state) {
  $delta_remove = $form_state['triggering_element']['#parents'][1];
  $form_state['field_deltas_delete'][] = $form_state['field_deltas'][$delta_remove];
  unset($form_state['field_deltas'][$delta_remove]);
  $form_state['rebuild'] = TRUE;
}

/**
* Profile recommended links Form
*/
function profile_recommended_links_form($form, &$form_state, $account = NULL){
  $form['#tree'] = TRUE;
  $form['#attributes']['class'] = 'profile_recommended_links_form';
  $default_values = get_input_value_from_account($account, $field_name = 'ers', array());
  $count_default_values = count($default_values);

  if (empty($form_state['num_er'])) {
    if($count_default_values > 0){
      $form_state['num_er'] = $count_default_values;
    }else{
      $form_state['num_er'] = 1;
    }
  }

  $count_er = $form_state['num_er'];
  $multiple_er = ($count_er > 1);

  // File er form element starts
  $form['fieldset_er'] = array(
      '#type' => 'fieldset',
      '#title' => t('Recommended Links'),
      '#prefix' => '<div id="fieldset-wrapper-er" class="fieldset-wrapper-er margin-fieldset">',
      '#suffix' => '</div>',
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
  );

  for ($i = 0; $i < $count_er; $i++) {
     // container.
    $container = array();
    $container_name = 'container';
    $container[$container_name] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'recommended-links-item',
        ),
      ),
    );

    $container[$container_name]['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#default_value' => isset($default_values[$i]['title']) ? $default_values[$i]['title'] : '',
      '#description' => t('The link title is limited to a maximum of 128 characters.'),
      '#prefix' => '<ul class="list-inline"><li>',
      '#suffix' => '</li>',
    );

    $container[$container_name]['url'] = array(
      '#type' => 'textfield',
      '#title' => t('Url'),
      '#default_value' => isset($default_values[$i]['url']) ? $default_values[$i]['url'] : '',
      '#description' => t('Link Url') . '.',
      '#prefix' => '<li>',
      '#suffix' => '</li>',
    );

    $container[$container_name]['estatus'] = array(
      '#type' => 'select',
      '#title' => t('Status'),
      '#options' => array(
          '_none' => '- '. t('None') . ' -',
          'publico' => t('Public'),
          'privado' => t('Private'),
      ),
      '#default_value' => isset($default_values[$i]['status']) ? $default_values[$i]['status'] : '',
      '#description' => t('Link Type').'.',
      '#prefix' => '<li>',
      '#suffix' => '</li></ul>',
    );

    $container[$container_name]['attach_file'] = array(
    '#title' => t('Attach file'),
    '#type' => 'managed_file',
    '#default_value' => isset($default_values[$i]['adjuntar_documento']) ? $default_values[$i]['adjuntar_documento'] : '',
    '#description' => t('Upload an evidence document in pdf format of your entry'),
    '#upload_location' => 'public://recomendados',
    );



    $form['fieldset_er']['er'][$i] = $container;

  }

  $form['fieldset_er']['add_er'] = array(
      '#type' => 'submit',
      '#value' => '+ ' . t('Add Link'),
      '#submit' => array('er_add_more_callback'),
      // Setting #limit_validation_errors to an empty array
      // ensures that the form fields are not validated when
      // the back button is used. Otherwise, we will get errors
      '#limit_validation_errors' => array(),
      '#ajax' => array(
          'callback' => 'er_callback',
          'wrapper' => 'fieldset-wrapper-er',
      ),
  );


// catastro saber si van a participar tienda virtual linea 319 9:000 am a 11:00 torre b segundo piso cara 30 25-90 eliezer banegas proceso
  // Remove
  if ($multiple_er) {
    $form['fieldset_er']['remove_er'] = array(
        '#type' => 'submit',
        '#value' => '- ' . t('Remove Link'),
        '#submit' => array('er_remove_one_callback'),
        '#limit_validation_errors' => array(),
        '#ajax' => array(
            'callback' => 'er_callback',
            'wrapper' => 'fieldset-wrapper-er',
        ),
    );
  }

  $ajax = array(
      'callback' => 'profile_recommended_links_form_ajax_submit',
      'wrapper' => '',
      'effect' => 'fade',
      'progress' => array(
          'type' => 'throbber',
          'message' => NULL,
      ),
      'event' => 'click',
  );
  // form submit
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#prefix' => '<div class="row"><div class="col-md-12">',
    '#suffix' => '</div></div>',
     '#ajax' => $ajax,
  );

  return $form;
}


/**
* Implements form ajax submit.
*/
function profile_recommended_links_form_ajax_submit($form, &$form_state){
  global $user;
  // Get the form values
  $values = isset($form_state['values']) ? $form_state['values'] : FALSE;
  $fieldset_sn  = ( isset($values['fieldset_er']['er']) && !empty($values['fieldset_er']['er']) )? $values['fieldset_er']['er'] : FALSE;
  $msg = t('Your changes have been successfully saved!');
  $response = new stdClass();
  $response->success = FALSE;
  $response->is_valid = TRUE;
  $response->message = $msg;
  if($response->is_valid){
    $user_fields = user_load($user->uid);
    // Delete field collection items.
    $field_collection_item_values = array();
    if(!empty($user_fields->field_enlaces_recomendados[LANGUAGE_NONE])){
      foreach ($user_fields->field_enlaces_recomendados[LANGUAGE_NONE] as $key => $value) {
        $field_collection_item_values[] = $value['value'];
        // Unset them.
        unset($user_fields->field_enlaces_recomendados[LANGUAGE_NONE][$key]);
      }
      if(!empty($field_collection_item_values)){
        // Delete field collection items.
        entity_delete_multiple('field_collection_item', $field_collection_item_values);
        user_save($user_fields);
      }
    }
    // Create News Values.
    $news_values = array();
    foreach ($fieldset_sn as $key => $item) {

      $title   = isset($item['container']['title'])?$item['container']['title']:'';
      $url     = isset($item['container']['url'])?$item['container']['url']:'';
      $estatus = isset($item['container']['estatus'])?$item['container']['estatus']:'';
      $file    = isset($item['container']['attach_file'])?$item['container']['attach_file']:'';

      if(isset($item['container']['attach_file']) && !empty($item['container']['attach_file'])){
        $file = file_load($item['container']['attach_file']);
        $file->filename = $file->fid . '-' . time();
        $file->status = FILE_STATUS_PERMANENT;
        file_save($file);
        file_usage_add($file, 'banrep_investigador', 'node', 4);
      }


      if(!empty($url) && !empty($title) && !empty($estatus)){
        $raw_user = user_load($user->uid);
        $collection = entity_create('field_collection_item', array('field_name' => 'field_enlaces_recomendados'));
        $collection->setHostEntity('user', $raw_user);
        if (!empty($file)) {
          $collection->field_adjuntar_documento[LANGUAGE_NONE][0] = (array)$file;
          $collection->field_adjuntar_documento[LANGUAGE_NONE][0]['display'] = 1;
        }

        $collection->field_url_recomendado[LANGUAGE_NONE][0]['url'] = $url;
        $collection->field_url_recomendado[LANGUAGE_NONE][0]['title'] = $title;
        $collection->field_status[LANGUAGE_NONE][0]['value'] = $estatus;
        // Save field-collection item.
        $collection->save(TRUE);
        // Now save the node
        user_save($raw_user);
      }
    }
    $response->success = TRUE;
  }

  return array(
      '#type' => 'ajax',
      '#commands' => array(
          array('command' => 'responseRecommendedLinksForm', 'data' => $response, 'msg' =>$msg),
      ),
  );

}


/*
* Get Input Value From Publication
*/
function get_input_value_from_account($account = NULL, $field_name = '', $default_value = ''){
  if(!is_null($account) && !empty($field_name)){
    switch ($field_name) {
      case 'profile_image':
        if(isset($account->picture->fid)){
          $default_value = $account->picture->fid;
        }
        break;
      case 'field_cv_file':
        if(isset($account->field_cv_file[LANGUAGE_NONE][0]['fid'])){
          $default_value = $account->field_cv_file[LANGUAGE_NONE][0]['fid'];
        }
        break;
      case 'field_perfil':
        if(isset($account->field_perfil[LANGUAGE_NONE][0]['value'])){
          $default_value = $account->field_perfil[LANGUAGE_NONE][0]['value'];
        }
        break;
      case 'field_work_in_progress':
        if(isset($account->field_work_in_progress [LANGUAGE_NONE][0]['value'])){
          $default_value = $account->field_work_in_progress[LANGUAGE_NONE][0]['value'];
        }
        break;
      case 'field_perfil_ingles':
        if(isset($account->field_perfil_ingles[LANGUAGE_NONE][0]['value'])){
          $default_value = $account->field_perfil_ingles[LANGUAGE_NONE][0]['value'];
        }
        break;
      case 'rls':
        if( isset($account->field_research_lines[LANGUAGE_NONE]) && is_array($account->field_research_lines[LANGUAGE_NONE]) && !empty($account->field_research_lines[LANGUAGE_NONE]) ){
          $default_value = array();
          foreach ($account->field_research_lines[LANGUAGE_NONE] as $key => $item) {
            $tid = $item['tid'];
            $default_value[] = get_term($tid);
          }
        }
        break;
      case 'sns':
        if( isset($account->field_social_networks[LANGUAGE_NONE]) && is_array($account->field_social_networks[LANGUAGE_NONE]) && !empty($account->field_social_networks[LANGUAGE_NONE]) ){
          $default_value = array();
          foreach ($account->field_social_networks[LANGUAGE_NONE] as $key => $item) {
            $fcid = $item['value'];
            $fields = field_collection_item_load($fcid);
            $name = '';
            if(isset($fields->field_social_network[LANGUAGE_NONE][0]['tid'])){
              $tid = $fields->field_social_network[LANGUAGE_NONE][0]['tid'];
              $name = $tid;
            }
            $url = '';
            if(isset($fields->field_url[LANGUAGE_NONE][0]['url'])){
              $url = $fields->field_url[LANGUAGE_NONE][0]['url'];
            }
            if(!empty($name) || !empty($url)){
              $default_value[] = array('name' => $name, 'url' => $url);
            }
          }
        }
        break;
      case 'ers':
        if( isset($account->field_enlaces_recomendados[LANGUAGE_NONE]) && is_array($account->field_enlaces_recomendados[LANGUAGE_NONE]) && !empty($account->field_enlaces_recomendados[LANGUAGE_NONE]) ){
          $default_value = array();
          foreach ($account->field_enlaces_recomendados[LANGUAGE_NONE] as $key => $item) {
            $fcid = $item['value'];
            $fields = field_collection_item_load($fcid);
            $title = '';
            if(isset($fields->field_url_recomendado[LANGUAGE_NONE][0]['title'])){
              $title = $fields->field_url_recomendado[LANGUAGE_NONE][0]['title'];
            }
            $url = '';
            if(isset($fields->field_url_recomendado[LANGUAGE_NONE][0]['url'])){
              $url = $fields->field_url_recomendado[LANGUAGE_NONE][0]['url'];
            }
            $status = '';
            if(isset($fields->field_status[LANGUAGE_NONE][0]['value'])){
              $status = $fields->field_status[LANGUAGE_NONE][0]['value'];
            }
            $adjuntar_documento = '';
            if (isset($fields->field_adjuntar_documento[LANGUAGE_NONE][0]['fid'])) {
              $adjuntar_documento = $fields->field_adjuntar_documento[LANGUAGE_NONE][0]['fid'];
            }

            if(!empty($title) || !empty($url) || !empty($status) || !empty($adjuntar_documento)){
              $default_value[] = array('title' => $title, 'url' => $url, 'status' => $status,'adjuntar_documento' => $adjuntar_documento);
            }

          }
        }
        break;
      case 'profile_formation':
        if( isset($account->field_studies_carried_out[LANGUAGE_NONE]) && is_array($account->field_studies_carried_out[LANGUAGE_NONE]) && !empty($account->field_studies_carried_out[LANGUAGE_NONE]) ){
          $default_value = array();
          foreach ($account->field_studies_carried_out[LANGUAGE_NONE] as $key => $item) {
            $fcid = $item['value'];
            $fields = field_collection_item_load($fcid);
            $title = '';
            if(isset($fields->field_titulo[LANGUAGE_NONE][0]['value'])){
              $title = $fields->field_titulo[LANGUAGE_NONE][0]['value'];
            }
            $university = '';
            if(isset($fields->field_university[LANGUAGE_NONE][0]['value'])){
              $university = $fields->field_university[LANGUAGE_NONE][0]['value'];
            }
            $year = '';
            if(isset($fields->field_year[LANGUAGE_NONE][0]['value'])){
              $year = $fields->field_year[LANGUAGE_NONE][0]['value'];
            }
            $level_study = '';
            if(isset($fields->field_nivel_estudio[LANGUAGE_NONE][0]['value'])){
              $level_study = $fields->field_nivel_estudio[LANGUAGE_NONE][0]['value'];
            }


            $fecha_inicio = isset($fields->field_fecha_inicio_estudio[LANGUAGE_NONE][0]['value'])?$fields->field_fecha_inicio_estudio[LANGUAGE_NONE][0]['value']:'';
            $fecha_fin    = isset($fields->field_fecha_fin_estudio[LANGUAGE_NONE][0]['value'])?$fields->field_fecha_fin_estudio[LANGUAGE_NONE][0]['value']:'';
            $tipo         = isset($fields->field_tipo_posgrado[LANGUAGE_NONE][0]['value'])?$fields->field_tipo_posgrado[LANGUAGE_NONE][0]['value']:'';
            $lugar        = isset($fields->field_lugar_posgrado[LANGUAGE_NONE][0]['value'])?$fields->field_lugar_posgrado[LANGUAGE_NONE][0]['value']:'';


            if (!empty($title) || !empty($university) || !empty($year) || !empty($level_study)){
              $default_value[] = array(
                'title' => $title,
                'university' => $university,
                'year' => $year,
                'level_study' => $level_study,
                'fecha_inicio' => $fecha_inicio,
                'fecha_fin' => $fecha_fin,
                'lugar' => $lugar,
                'tipo' => $tipo
              );
            }
          }
        }
        break;
      case 'profile_academic_info':
        if( isset($account->field_academics_profiles[LANGUAGE_NONE]) && is_array($account->field_academics_profiles[LANGUAGE_NONE]) && !empty($account->field_academics_profiles[LANGUAGE_NONE]) ){
          $default_value = array();
          foreach ($account->field_academics_profiles[LANGUAGE_NONE] as $key => $item) {
            $fcid = $item['value'];
            $fields = field_collection_item_load($fcid);
            $academic_profile = '';
            if(isset($fields->field_academic_profile[LANGUAGE_NONE][0]['tid'])){
              $academic_profile = $fields->field_academic_profile[LANGUAGE_NONE][0]['tid'];
            }
            $url = '';
            if(isset($fields->field_url[LANGUAGE_NONE][0]['url'])){
              $url = $fields->field_url[LANGUAGE_NONE][0]['url'];
            }
            if (!empty($profile) || !empty($url)){
              $default_value[] = array(
                'academic_profile' => $academic_profile,
                'url' => $url,
              );
            }
          }
        }
        break;
      default:
        # code...
        break;
    }
  }
  return $default_value;
}

/**
* returns the name of a taxonomy term based on its tid:
*/
function get_term($tid) {
  return db_select('taxonomy_term_data', 't')
  ->fields('t', array('name'))
  ->condition('tid', $tid)
  ->execute()
  ->fetchField();
}

/**
* returns the name of a taxonomy term based on its tid:
*/
function get_node_title($nid) {
  return db_select('node', 'n')
  ->fields('n', array('title'))
  ->condition('nid', $nid)
  ->execute()
  ->fetchField(); 
}

/*
* Get Input Value From Publication
*/
function get_input_value_from_publication($publication = NULL, $field_name = '', $default_value = '', $index = null){
  if (!is_null($publication) && !empty($field_name)) {
    switch ($field_name) {
      case 'title_en':
        if (isset($publication->field_title_en[LANGUAGE_NONE][0]['value'])) {
          $default_value = $publication->field_title_en[LANGUAGE_NONE][0]['value'];
        }
        break;
      case 'title':
        if (isset($publication->title)) {
          $default_value = $publication->title;
        }
        break;
      case 'description':
        if (isset($publication->body[LANGUAGE_NONE][0]['value'])) {
          $default_value = $publication->body[LANGUAGE_NONE][0]['value'];
        }
        break;
      case 'description_en':
        if (isset($publication->field_body_en[LANGUAGE_NONE][0]['value'])) {
          $default_value = $publication->field_body_en[LANGUAGE_NONE][0]['value'];
        }
        break;
      case 'url':
        if (isset($publication->field_url[LANGUAGE_NONE][0]['url'])) {
          $default_value = $publication->field_url[LANGUAGE_NONE][0]['url'];
        }
        break;
      case 'doi':
        if (isset($publication->field_doi[LANGUAGE_NONE][0]['url'])) {
          $default_value = $publication->field_doi[LANGUAGE_NONE][0]['url'];
        }
        break;
      case 'publication_year':
        if (isset($publication->field_publication_year[LANGUAGE_NONE][0]['value'])) {
          $default_value = $publication->field_publication_year[LANGUAGE_NONE][0]['value'];
        }
        break;
      case 'act_year':
        if (isset($publication->field_year[LANGUAGE_NONE][0]['value'])) {
          $default_value = $publication->field_year[LANGUAGE_NONE][0]['value'];
        }
        break;
      case 'attach_doc':
        if (isset($publication->field_re_attach_doc[LANGUAGE_NONE][0]['fid'])) {
          $default_value = $publication->field_re_attach_doc[LANGUAGE_NONE][0]['fid'];
        }
        break;
      case 'mag_name':
        if (isset($publication->field_mag_name[LANGUAGE_NONE][0]['value'])) {
          $default_value = $publication->field_mag_name[LANGUAGE_NONE][0]['value'];
        }
        break;
      case 'sepi':
        if (isset($publication->field_sepi[LANGUAGE_NONE][0]['value'])) {
          $default_value = $publication->field_sepi[LANGUAGE_NONE][0]['value'];
        }
        break;
      case 'volumen':
        if (isset($publication->field_volumen[LANGUAGE_NONE][0]['value'])) {
          $default_value = $publication->field_volumen[LANGUAGE_NONE][0]['value'];
        }
        break;
      case 'number':
        if (isset($publication->field_number[LANGUAGE_NONE][0]['value'])) {
          $default_value = $publication->field_number[LANGUAGE_NONE][0]['value'];
        }
        break;
      case 'page':
        if (isset($publication->field_page[LANGUAGE_NONE][0]['value'])) {
          $default_value = $publication->field_page[LANGUAGE_NONE][0]['value'];
        }
        break;
      case 'editorial':
        if (isset($publication->field_editorial[LANGUAGE_NONE][0]['value'])) {
          $default_value = $publication->field_editorial[LANGUAGE_NONE][0]['value'];
        }
        break;
      case 'pub_city':
        if (isset($publication->field_pub_city[LANGUAGE_NONE][0]['value'])) {
          $default_value = $publication->field_pub_city[LANGUAGE_NONE][0]['value'];
        }
        break;
      case 'pub_type':
        if (isset($publication->field_pub_type[LANGUAGE_NONE][0]['value'])) {
          $default_value = $publication->field_pub_type[LANGUAGE_NONE][0]['value'];
        }
        break;
      case 'review':
        if (isset($publication->field_review[LANGUAGE_NONE][0]['value'])) {
          $default_value = $publication->field_review[LANGUAGE_NONE][0]['value'];
        }
        break;
      case 'concept_target_id':
        if (isset($publication->field_concept[LANGUAGE_NONE][0]['target_id'])) {
          $default_value = $publication->field_concept[LANGUAGE_NONE][0]['target_id'];
        }
        break;
      case 'concept_type':
        if (isset($publication->field_concept_type[LANGUAGE_NONE][0]['tid'])) {
          $default_value = $publication->field_concept_type[LANGUAGE_NONE][0]['tid'];
        }
        break;
      case 'concept_name':
        $concept_target_id = get_input_value_from_publication($publication, 'concept_target_id', -1);
        if ($concept_target_id !== -1) {
          $concept_node = node_load($concept_target_id);
          $default_value = $concept_node->title . ' (' . $concept_target_id . ')';
        }
        break;
      case 'concept_formation':
        $default_value = array();
        if (isset($publication->field_concept_formation[LANGUAGE_NONE][0]['tid'])) {
          $concept_formation = taxonomy_term_load($publication->field_concept_formation[LANGUAGE_NONE][0]['tid']);
        }
        break;

      case 'jels':
        if (isset($publication->field_jel[LANGUAGE_NONE][0])) {
          $default_value = [];
          foreach ($publication->field_jel[LANGUAGE_NONE] as $value) {
            $term = taxonomy_term_load($value['tid']);
            $default_value[] = $term->name;
          }
          $default_value = implode(', ', $default_value);
        }
        break;
      case 'rol_within_publication':
        if(!is_null($index)){
           if( isset($publication->field_co_authors[LANGUAGE_NONE][$index]) ){
              $entity = $publication->field_co_authors[LANGUAGE_NONE][$index]['value'];
              $default_value = entity_load('field_collection_item', array($entity))[$entity]->field_role_within_publicat[LANGUAGE_NONE][0]['tid'];
           } 
        }
        else if (isset($publication->field_role_within_publication[LANGUAGE_NONE][0]['tid'])) {
          $default_value = $publication->field_role_within_publication[LANGUAGE_NONE][0]['tid'];
        }
        break;
      case 'co_authors_author':
        
        $default_value = [];
        if (isset($publication->main_author_reference[0]['name'])) {
          //$default_value[] = $publication->main_author_reference[0]['name'] . ' (' . $publication->main_author_reference[0]['tid'] . ')';
          $default_value[] = $publication->main_author_reference[0]['name']['co_authors_author'];
        }
        elseif (isset($publication->nid)) {
          if (isset($publication->field_main_author_reference[LANGUAGE_NONE][0]['tid'])) {
            $main = taxonomy_term_load($publication->field_main_author_reference[LANGUAGE_NONE][0]['tid']);
            $default_value[] = $main->name . ' (' . $main->tid . ')';
          }
        }
        if (
          isset($publication->other_co_authors) &&
          is_array($publication->other_co_authors) &&
          !empty($publication->other_co_authors)
        ) {
          $default_value = array_merge($default_value, $publication->other_co_authors);
        }
        elseif (isset($publication->field_other_co_authors[LANGUAGE_NONE])) {
          foreach ($publication->field_other_co_authors[LANGUAGE_NONE] as $key => $value) {
            $term = taxonomy_term_load($value['tid']);
            $default_value[] = $term->name . ' (' . $term->tid . ')';
          }
        }
        
        break;
      case 'tags':
        if (isset($publication->field_publication_tags[LANGUAGE_NONE][0])) {
          $default_value = [];
          foreach ($publication->field_publication_tags[LANGUAGE_NONE] as $value) {
            $term = taxonomy_term_load($value['tid']);
            $default_value[] = $term->name;
          }
          $default_value = implode(', ', $default_value);
        }
        break;
      case 'alternate_language':
        if (isset($publication->alternate_language)) {
          $default_value = $publication->alternate_language;
        }
        break;
      case 'type_accumulated':
        if (isset($publication->field_concept_category[LANGUAGE_NONE][0]['tid'])) {
          $default_value = $publication->field_concept_category[LANGUAGE_NONE][0]['tid'];
        }
        break;
      case 'visibility':
        if (isset($publication->field_act_status[LANGUAGE_NONE][0]['value'])) {
          $default_value = $publication->field_act_status[LANGUAGE_NONE][0]['value'];
        }
        break;
      case 'start_date':
        if (isset($publication->field_act_date_start[LANGUAGE_NONE][0]['value'])) {
          $default_value = date('Y-m-d',$publication->field_act_date_start[LANGUAGE_NONE][0]['value']);
        }
        break;
      case 'end_date':
        if (isset($publication->field_act_date_end[LANGUAGE_NONE][0]['value'])) {
          $default_value = date('Y-m-d',$publication->field_act_date_end[LANGUAGE_NONE][0]['value']);
        }
        break;
    }
  }
  return $default_value;
}

/**
*  is registered user by name
*/
function _is_registered_user_by_name($name = ''){
  if(!empty($name)){
    $match = [];
    preg_match_all('#\((.*?)\)#', $name, $match , PREG_SET_ORDER);
    $match = end($match);
    if(isset($match[1]) && is_numeric($match[1])){
      return $match[1];
    }
  }
  return FALSE;
}

/**
* Get Social Networks type options
*/
function get_social_network_type_options($add_none = TRUE){
  $voc = taxonomy_vocabulary_machine_name_load('social_networks');
  $categorias_de_conceptos = taxonomy_get_tree($voc->vid, $parent = 0, $max_depth = 1);
  $options = array();
  if($add_none){
    $options[-1] = t('- Ningúno -');
  }
  foreach ($categorias_de_conceptos as $data) {
    $options[$data->tid] = $data->name;
  }
  return $options;
}

/**
* Get academic profiles type options
*/
function get_academic_profiles_type_options($add_none = TRUE){
  $voc = taxonomy_vocabulary_machine_name_load('academics_profiles');
  $academic_profiles_categories = taxonomy_get_tree($voc->vid, $parent = 0, $max_depth = 1);
  $options = array();
  if($add_none){
    $options[-1] = t('- Ningúno -');
  }
  foreach ($academic_profiles_categories as $data) {
    $options[$data->tid] = $data->name;
  }
  return $options;
}

/*
*  Check if is one valid concept type
*/
function is_valid_concept_type($concept_type = FALSE){
  if($concept_type != FALSE){
    $concepts_type = get_concepts_type_options($add_none = FALSE);
    foreach ($concepts_type as $tid => $type) {
      if($concept_type == $tid){
        return TRUE;
      }
    }
  }
  return FALSE;
}

/*
*  Check if is one valid concept
*/
function is_valid_concept($concept_name = FALSE){
  if($concept_name != FALSE){
    global $user;
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'concept')
      ->propertyCondition('title', $concept_name)
      ->propertyCondition('uid', array($user->uid, 1), 'IN')
      ->range(0, 1);
      $result = $query->execute();
      if (isset($result['node'])) {
        return TRUE;
      }
  }
  return FALSE;
}

/**
* Get Scoring Concept by Name
*/
function _get_scoring_concept_by_name($concept_name = FALSE){
  if($concept_name != FALSE){
    $match = [];
    preg_match_all('#\((.*?)\)#', $concept_name, $match , PREG_SET_ORDER);
    $match = end($match);
    if(isset($match[1]) && is_numeric($match[1])){
      $concept = node_load($match[1]);
      if(isset($concept->nid) && ($concept->type == "concept")){
        return $concept->nid;
      }
    }
    if(isset($match[1])){
      $concept_name = str_replace($match[1], '', $concept_name);
      $concept_name = trim($concept_name);
    }
    global $user;
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'concept')
      ->propertyCondition('title', $concept_name)
      ->propertyCondition('uid', array($user->uid, 1), 'IN')
      ->range(0, 1);
      $result = $query->execute();
      if (isset($result['node'])) {
         $items_nids = array_keys($result['node']);
         return reset($items_nids);
      }
  }
  return FALSE;
}

/*
*  Check if is one valid rol within publication
*/
function is_valid_rol_within_publication($rol = FALSE){
  if(($rol != FALSE) && ($rol != '-1'))  {
    $roles = get_roles_within_publication();
    foreach ($roles as $tid => $name) {
      if($rol == $tid){
        return TRUE;
      }
    }
    return TRUE; # Valida que sea rol de tipo ROL_AUTHOR_BOOK
  }
  return FALSE;
}
/*
*  Check if is valid co_author
*/
function is_valid_co_author($co_author = FALSE){
  if($co_author != FALSE) {
    $query = db_select('users', 'u');
    $query->leftJoin('users_roles', 'ur', 'u.uid = ur.uid');
    $query->leftJoin('field_data_field_full_name', 'n', 'u.uid = n.entity_id');
    $query->condition('u.status', 1);
    $query->condition('ur.rid', array(4), 'IN'); // Rol Investigador
    $query->condition('n.field_full_name_value', $co_author);
    $query->fields('u');
    $query->fields('n', array('field_full_name_value'));
    $users = $query->execute()->fetchAll();
    if(count($users) > 0 ){
      return TRUE;
    }
  }
  return FALSE;
}


/**
* _get co author tid by name
*/
function _get_co_author_tid_by_name($name = FALSE){
  if ($name != FALSE) {
    $match = [];
    preg_match_all('#\((.*?)\)#', $name, $match , PREG_SET_ORDER);
    $match = end($match);
    if (isset($match[1]) && is_numeric($match[1])) {
        return $match[1];
    }
  }
  return FALSE;
}

/**
* _get co author uid by name
*/
function _get_co_author_uid_by_name($name = FALSE){
  $response = array();
  if ($name != FALSE) {
    $match = [];
    preg_match_all('#\((.*?)\)#', $name, $match , PREG_SET_ORDER);
    $match = end($match);
    
    $match[1] = ( is_string($match[1]) ) ? (int)$match[1] : $match[1];
    
    if (isset($match[1]) && is_numeric($match[1])) {
      $response['tid'] = $match[1];
      $response['uid'] = NULL;
      
      if($uid = _banrep_core_get_user_by_author_term($match[1])){
        $response['uid'] = $uid;
      }
      
      return $response;
    }
    else {
      return FALSE;
    }
  }
  return FALSE;
}

/**
*  _get investigation line tid by name
*/
function _get_investigation_line_tid_by_name($name = FALSE){
  if($name != FALSE) {
    $terms = taxonomy_get_term_by_name($name);
    if(!empty($terms)){
      $tids = array_keys($terms);
      return reset($tids);
    }
  }
  return FALSE;
}


/**
*  _get other co author tid by name
*/
function _get_other_co_author_tid_by_name($name = FALSE){
  if ($name != FALSE) {
    $terms = taxonomy_get_term_by_name($name);
    if (!empty($terms)) {
      $tids = array_keys($terms);
      return reset($tids);
    }
  }
  return FALSE;
}


/*
* _get jel by name
*/
function _get_jel_by_name($name = FALSE){
  if($name != FALSE) {
    $terms = taxonomy_get_term_by_name($name);
    if(!empty($terms)){
      $tids = array_keys($terms);
      return reset($tids);
    }
  }
  return FALSE;
}

/*
* _get tag by name
*/
function _get_tag_by_name($name = FALSE){
  if($name != FALSE) {
    $terms = taxonomy_get_term_by_name($name);
    if(!empty($terms)){
      $tids = array_keys($terms);
      return reset($tids);
    }else{
      // Create Tag.
      $term = new stdClass();
      $term->name = $name;
      $term->vid = 1; // Tag Vid.
      taxonomy_term_save($term);
      if(isset($term->tid)){
        return $term->tid;
      }
    }
  }
  return FALSE;
}

/*
*  Check if is valid array of co_authors
*/
function is_valid_co_authors($co_authors = array(), $concept_type = FALSE){
  if(count($co_authors) > 0) {
    $is_book = ($concept_type == '206');
    foreach ($co_authors as $co_author) {
      if($is_book){
        if(isset($co_author['co_author']) && isset($co_author['rol_within_publication']) && is_valid_rol_within_publication($co_author['rol_within_publication']) && is_valid_co_author($co_author['co_author']) ){
        }else{
          return FALSE;
        }
      }else{
        if( isset($co_author['co_author']) && is_valid_co_author($co_author['co_author']) ){
        }else{
          return FALSE;
        }
      }
    }
    return TRUE;
  }
  return FALSE;
}

/**
* Implements form ajax submit.
*/
function publications_add_form_ajax_submit($form, &$form_state){

    // Get the form values
    $values = isset($form_state['values']['query']) ? $form_state['values']['query'] : FALSE;
    $title = isset($values['title']) ? $values['title'] : FALSE;

    $description = isset($values['description']['value']) ? $values['description']['value'] : FALSE;
    $url = isset($values['url']) ? $values['url'] : FALSE;

    $pub_type = isset($values['pub_type']) ? $values['pub_type'] : FALSE;
    $review = isset($values['review']) ? $values['review'] : FALSE;

    $jels = isset($values['fieldset_jel']['jel']) ? $values['fieldset_jel']['jel'] : array();
    $tags = isset($values['fieldset_tags']['tags']) ? $values['fieldset_tags']['tags'] : array();

    $concept_type = isset($values['concept_type']) ? $values['concept_type'] : FALSE;
    $concept_name = isset($values['concept']) ? $values['concept'] : FALSE;
    $rol_within_publication = isset($values['rol_within_publication']) ? $values['rol_within_publication'] : FALSE;

    $co_authors_chapter_author = isset($values['co_author_fieldset_chapter_author']['co_authors_chapter_author']) ? $values['co_author_fieldset_chapter_author']['co_authors_chapter_author'] : array();
    $co_authors_author = isset($values['co_author_fieldset']['co_authors_author']) ? $values['co_author_fieldset']['co_authors_author'] : array();
    $co_authors_book_compiler = isset($values['co_author_fieldset_book_compiler']['co_authors_book_compiler']) ? $values['co_author_fieldset_book_compiler']['co_authors_book_compiler'] : array();
    $co_authors_book_editor = isset($values['co_author_fieldset_book_editor']['co_authors_book_editor']) ? $values['co_author_fieldset_book_editor']['co_authors_book_editor'] : array();

    $co_authors = array();

    if(count($co_authors_chapter_author) > 0){
      foreach ($co_authors_chapter_author as $k => $name) {
        if(!empty($name)){
          $co_authors[] = array('co_author' => $name, 'rol_within_publication' => '220');
        }
      }
    }

    if(count($co_authors_author) > 0){
      foreach ($co_authors_author as $k => $name) {
        if(!empty($name)){
          $co_authors[] = array('co_author' => $name, 'rol_within_publication' => '219');
        }
      }
    }

    if(count($co_authors_book_compiler) > 0){
      foreach ($co_authors_book_compiler as $k => $name) {
        if(!empty($name)){
          $co_authors[] = array('co_author' => $name, 'rol_within_publication' => '222');
        }
      }
    }

    if(count($co_authors_book_editor) > 0){
      foreach ($co_authors_book_editor as $k => $name) {
        if(!empty($name)){
          $co_authors[] = array('co_author' => $name, 'rol_within_publication' => '221');
        }
      }
    }

    $other_co_authors = isset($values['other_co_author_fieldset']['other_co_author']) ? $values['other_co_author_fieldset']['other_co_author'] : array();

    $jel_tids = array();
    if(!empty($jels)){
      foreach ($jels as $key => $jel) {
       $jel_tid = _get_jel_by_name($jel);
       if($jel_tid){
        $jel_tids[] = array('tid' => $jel_tid);
       }
      }
    }

    $tag_tids = array();
    if(!empty($tags)){
      foreach ($tags as $key => $tag) {
       $tag_tid = _get_tag_by_name($tag);
       if($tag_tid){
        $tag_tids[] = array('tid' => $tag_tid);
       }
      }
    }

    $response = new stdClass();
    $response->success = FALSE;
    $response->is_valid = TRUE;
    $response->msg = '';

    // Validations
    if( ($title == FALSE) || ($description == FALSE) || ($url == FALSE) || ($pub_type == FALSE) ){
      $response->msg = 'Los campos básicos son requeridos.';
      $response->is_valid = FALSE;
    }

    if(($pub_type  == '201') || ($pub_type  == '206')){
      // Book or Article Validations
      if( (!is_valid_concept_type($concept_type)) || (!is_valid_concept($concept_name)) ){
        $response->msg = 'La Publicación no tiene un tipo de concepto valido.';
        $response->is_valid = FALSE;
      }
      if( (!is_valid_rol_within_publication($rol_within_publication)) ){
        $response->msg = 'La Publicación no tiene un Rol dentro de la Publicación valida.';
        $response->is_valid = FALSE;
      }
      if(count($co_authors) > 0){
        if(!is_valid_co_authors($co_authors, $concept_type)){
          $response->msg = 'La Publicación Contiene Co-Autores no Validos.';
          $response->is_valid = FALSE;
        }
      }
    }

    // Save Publication
    if($response->is_valid){

      global $user;
      $node = new stdClass();  // Create a new node object
      $node->type = 'publication';  // Content type
      $node->language = LANGUAGE_NONE;  // Or e.g. 'en' if locale is enabled
      node_object_prepare($node);  //Set some default values
      $node->status = 0;   // (1 or 0): published or unpublished
      $node->promote = 0;  // (1 or 0): promoted to front page or not
      $node->sticky = 0;  // (1 or 0): sticky at top of lists or not
      $node->comment = 0;  // 2 = comments open, 1 = comments closed, 0 = comments hidden
      $node->uid = $user->uid;
      $node->title = $title;
      $node->body[LANGUAGE_NONE][0]['value'] = $description;
      $node->field_url[LANGUAGE_NONE][0]['url'] = $url;
      $concept_target_id = _get_scoring_concept_by_name($concept_name);
      if($concept_target_id != FALSE){
        $node->field_concept[LANGUAGE_NONE][0]['target_id'] = $concept_target_id;
      }

      $node->field_order[LANGUAGE_NONE][0]['value'] = 0;
      $node->field_jel[LANGUAGE_NONE] = $jel_tids;
      $node->field_publication_tags[LANGUAGE_NONE] = $tag_tids;

      if( ($rol_within_publication != FALSE) && ($rol_within_publication != '-1') ){
        $node->field_role_within_publication[LANGUAGE_NONE][0]['tid'] = $rol_within_publication;
      }

      $node->field_pub_type[LANGUAGE_NONE][0]['value'] = $pub_type;

      $node->field_date[LANGUAGE_NONE][0]['value'] = time();
      $node->field_estado_publicaci_n[LANGUAGE_NONE][0]['value'] = 2; // Pendiente Aprobación
      $field_other_co_authors = array();
      if(count($other_co_authors) > 0){
        foreach ($other_co_authors as $key => $other_co_author) {
            $other_co_author_tid = _get_other_co_author_tid_by_name($other_co_author);
            if($other_co_author_tid != FALSE){
              $field_other_co_authors[] = array('tid' => $other_co_author_tid);
            }
        }
      }
      $node->field_other_co_authors[LANGUAGE_NONE] = $field_other_co_authors;
      $publications = array();
      // Save Publication
      node_save($node);
      if(isset($node->nid)){
        $response->success = TRUE;
        $response->title = $node->title;
        drupal_set_message(t('Su publicación ha sido guardada exitosamente y se encuentra en proceso de Aprobación!.'));
      }
    }

    return array(
        '#type' => 'ajax',
        '#commands' => array(
            array('command' => 'responsePublicationsAddForm', 'data' => $response),
        ),
    );
}

/**
* Get concepts type options
*/
function get_roles_within_publication(){
  $voc = taxonomy_vocabulary_machine_name_load('rol_dentro_de_la_publicacion');
  $categorias_de_conceptos = taxonomy_get_tree($voc->vid, $parent = 0, $max_depth = 1);
  $options = array();
  $options[-1] = t('— Seleccionar');
  foreach ($categorias_de_conceptos as $data) {
    $options[$data->tid] = $data->name;
  }
  return $options;
}

/**
* Get concepts type options
*/
function get_concepts_type_options($add_none = TRUE){
  $voc = taxonomy_vocabulary_machine_name_load('categorias_de_conceptos');
  $categorias_de_conceptos = taxonomy_get_tree($voc->vid, $parent = 0, $max_depth = 1);
  $options = array();
  if($add_none){
    //$options[-1] = t('Ningúno');
  }
  foreach ($categorias_de_conceptos as $data) {
    $options[$data->tid] = $data->name;
  }
  return $options;
}

function banrep_core_profile_setting_form($form, &$form_state) {
  // Build Breadcrumbs
  $breadcrumb = array();
  $breadcrumb[] = l('Home', '<front>');
  $breadcrumb[] = '<span>Profile Fields Setting</span>';
  $breadcrumb[] = '<span></span>';

  // Set Breadcrumbs
  drupal_set_breadcrumb($breadcrumb);
  drupal_set_title(t('Profile Fields Setting'));

  $form['setting'] = array(
    '#type' => 'fieldset',
    '#title' => t('Profile Fields Setting'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['setting']['table'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array( 'table-form-container',),),
    '#prefix' => '<div class="table-form">',
    '#suffix' => '</div>',
  );

  $fields = array(
    'field_full_name' => t('Nombre completo'),
    'field_research_lines' => t('Líneas de investigación'),
    'field_position' => t('Cargo'),
    'field_city' => t('Ciudad'),
    'field_dependency' => t('Dependencia'),
    'field_date_admission' => t('Fecha ingreso al banco'),
    'field_email_corporate' => t('Correo electrónico institucional'),
    'field_email_personal' => t('Correo electrónico personal'),
    'field_genre' => t('Género'),
    'field_perfil' => t('Perfil'),
    'field_academics_profiles' => t('Perfiles académicos'),
    'field_studies_carried_out' => t('Estudios Realizados'),
     //'field_co_authors' => t('Coautores'),
    'field_cv_file' => t('Hoja de vida'),
    'field_social_networks' => t('Redes sociales'),
    'field_score' => t('Puntaje'),
    'field_likes' => t('Likes'),
    //'field_notification_alter' => t('Notificaciones al modificar'),
    //'field_pr_visibility' => t('Visibilidad del perfil'),
  );
  $table = '<table class="sticky-enabled table-select-processed tableheader-processed sticky-table">
               <thead>
                    <tr>
                       <th>'.t('Campos').'</th>
                       <th>'.t('Privado').'</th>
                    </tr>
                </thead>
                <tbody>';
  $ite = 1;
  $count = count($fields);
  foreach ($fields as $field_name => $label) {
    $class = "";
    $tr_begin = '<tr class="'.$class.'">';
    $tr_end = '</tr>';
    $td_begin = '<td>';
    $td_end = '</td>';

    $td_name = $td_begin.$label.$td_end;

    if($ite&1) {
        $class = 'odd';
    } else {
        $class = 'even';
    }

    $_prefix = '';
    $_suffix = '';
    if($ite == 1){
        $_prefix .= $table;
    }

    $_prefix .= $tr_begin.$td_name.$td_begin;
    $_suffix .= $td_end.$tr_end;

    if($count == $ite){
        $_suffix .= "</tbody></table>";
    }

    $name =  'profile_setting_'.$field_name;
    $form['setting']['table'][$name] = array(
        '#title' => t(''),
        '#type' => 'checkbox',
        '#default_value' => variable_get($name, 0),
        '#prefix' => $_prefix,
        '#suffix' => $_suffix,
    );
    $ite = $ite + 1;

  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Guardar cambios'),
  );

  return $form;
}

/**
 * Add a submit handler/function to the form.
 *
 * This will add a completion message to the screen when the
 * form successfully processes
 */
function banrep_core_profile_setting_form_submit($form, &$form_state) {
    $values = $form_state['values'];
    $prefix = 'profile_setting_';
    foreach ($values as $name => $value) {
      if (strpos($name, $prefix) !== false) {
        variable_set($name, $value);
        $field_name = str_replace($prefix, '', $name);
        $field_info = field_info_field($field_name);
        if(!is_null($field_info)){
          if($value){
            _banrep_core_profile_setting_allow_private_field($field_name, $field_info['id']);
          }else{
            _banrep_core_profile_setting_disallow_private_field($field_name, $field_info['id']);
          }
        }
      }
    }
    drupal_set_message(t('Los cambios han sido guardados.'));
}

// Custom functions
function banrep_core_search_block_form($form, &$form_state) {

  $engines = variable_get('banrep_core_engines', array());
  $source_options = array();
  $source_engines = array();
  foreach ($engines as $key => $engine) {
    if(!empty($engine['pageid'])){
      $source_options[] = $engine['pageid'];
      if (!preg_match("~^(?:f|ht)tps?://~i", $engine['formatid'])) {
          $engine['formatid'] = "http://" . $engine['formatid'];
      }
      $source_engines[] = $engine;
    }
  }

  drupal_add_js(array('banrep_core' => array('engines' => $source_engines)), 'setting');

  $form['source'] = array(
    '#title' => t(''),
    '#type' => 'select',
    '#description' => '',
    '#options' => $source_options,
  );

  $form['keys'] = array(
    '#type' => 'textfield',
    '#size' => 15,
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
  );

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'banrep_core') . '/js/search_block_form.js',
  );

  return $form;
}

/**
 * Allow or disAllow private field for all the user witht the role: Investigador
 */
function _banrep_core_profile_setting_set_private_field($field_name, $field_id, $private){
  // Fetch an instance info array.
  $instance_info = field_info_instance($entity_type = 'user', $field_name, $bundle_name = 'user');
  // Change a single property in the instance definition.
  $instance_info['settings']['user_field_privacy'] = $private;
  // Write the changed definition back.
  field_update_instance($instance_info);

  if($private == 0){
    // Get all the uid of the investigadores
    $role_ids =  array(1, 2, 3, 4, 5, 6, 7, 8);
    $query = 'SELECT DISTINCT(ur.uid)
      FROM {users_roles} AS ur
      WHERE ur.rid IN (:rids)';
    $result = db_query($query, array(':rids' => $role_ids));
    $uids = $result->fetchCol();
    $uids[] = 1;
    // Deleting
    $num_deleted = db_delete('user_field_privacy_value')
        ->condition('uid', $uids, 'IN')
        ->condition('fid', $field_id)
        ->execute();
  }
}

/**
 * Allow private field for all the user witht the role: Investigador
 */
function _banrep_core_profile_setting_allow_private_field($field_name, $field_id){
  _banrep_core_profile_setting_set_private_field($field_name, $field_id, $private = 1);
}

/**
 * Disallow private field for all the user witht the role: Investigador
 */
function _banrep_core_profile_setting_disallow_private_field($field_name, $field_id){
  _banrep_core_profile_setting_set_private_field($field_name, $field_id, $private = 0);
}

/**
 * Implements hook_form_alter().
 */
function banrep_core_form_alter(&$form, &$form_state, $form_id) {


  switch ($form_id) {
    case 'taxonomy_form_term':
       $form['#validate'][] = 'profile_group_validate_img';
    break;
    case 'user_login':
    case 'user_login_block':
      $form['name']['#attributes']['placeholder'] = t( 'Username' );
      $form['pass']['#attributes']['placeholder'] = t( 'Password' );
      break;
    case 'user_pass':
      $form['name']['#attributes']['placeholder'] = t( 'Username' );
      break;
    case 'banrep_core_search_block_form':
      $form['actions']['button']['#prefix'] = '<button type="submit">';
      $form['actions']['button']['#suffix'] = '</button>';
      $form['actions']['button']['#markup'] = '<i class="icon-buscar"></i>';
      break;
    case 'user_profile_form':
        if(drupal_get_path_alias(current_path()) == 'profile/edit'){
          $form['#submit'][] = 'banrep_core_submit';
          $form['account']['readonly']['mail'] = $form['account']['mail'];
          $form['account']['readonly']['mail']['#type'] = 'hidden';
          $form['account']['mail']['#disabled'] = TRUE;
          hide($form['account']['roles']);
          hide($form['account']['status']);
          hide($form['metatags']);
          hide($form['field_likes']);
          hide($form['field_rss']);
          hide($form['field_score']);
          hide($form['field_pr_visibility']);
          hide($form['signature_settings']);
          hide($form['password_policy']);
          hide($form['field_notification_alter']);
          hide($form['field_research_group']);
          hide($form['field_log']);
          hide($form['field_repec_id']);
          hide($form['field_scopus_author_author_id']);
        }
        $form['field_score']['#disabled'] = TRUE;
        $form['field_score']['#attributes']['disabled'] = 'disabled';
        $form['field_score']['#attributes']['readonly'] = 'readonly';
      break;
    case 'pub_user_node_form':
      $diabled = array(
        'title',
        'field_publicacion',
        'field_user_reference',
        'field_main_author',
        'field_order',
        'field_research_group',
      );
      foreach ($diabled as $field_name) {
        $form[$field_name]['#disabled'] = TRUE;
      }
	  $form['additional_settings']['#access'] = TRUE;

    break;
    case 'blog_node_form':
      global $user;
      if( arg(0) == 'profile' && arg(1) == 'blogs' ){
        $query = db_select('field_data_field_members', 'm');
        $query->fields('m', array('entity_id'));
        $query->condition('m.field_members_target_id', $user->uid);
        $tid = $query->execute()->fetchField();
        if($tid){
          $form['field_research_group']['und']['#default_value'] = $tid;
        }
        $form['field_research_group']['#access'] = FALSE;
        hide($form['metatags']);
        hide($form['password_policy']);
        hide($form['signature_settings']);
        hide($form['additional_settings']);
        array_unshift($form['#validate'], "_check_admin_grupo_blog_node_form");
        $form['#submit'][] = '_callback_on_post_blog_save';
        $form['actions']['submit']['#submit'][] = '_callback_on_post_blog_save';
      }
      break;
    case 'article_node_form':
      global $user;
      if( arg(0) == 'profile' && arg(1) == 'article' ){
        $query = db_select('field_data_field_members', 'm');
        $query->fields('m', array('entity_id'));
        $query->condition('m.field_members_target_id', $user->uid);
        $tid = $query->execute()->fetchField();
        if($tid){
          $form['field_research_group']['und']['#default_value'] = $tid;
        }
        $form['field_research_group']['#access'] = FALSE;
        $form['field_article_section']['und']['#default_value'] = 2;
        $form['field_article_section']['#access'] = FALSE;
        hide($form['metatags']);
        hide($form['password_policy']);
        hide($form['signature_settings']);
        hide($form['additional_settings']);
        array_unshift($form['#validate'], "_check_admin_grupo_blog_node_form");
        $form['#submit'][] = '_callback_on_post_article_save';
        $form['actions']['submit']['#submit'][] = '_callback_on_post_article_save';
      }
      break;
    case 'event_node_form':
      $path = drupal_get_path_alias(current_path());
      if( (strpos($path, 'profile/articles') !== false) ){
        $query = db_select('field_data_field_members', 'm');
        $query->fields('m', array('entity_id'));
        $query->condition('m.field_members_target_id', $user->uid);
        $tid = $query->execute()->fetchField();
        if($tid){
          $form['field_research_group']['und']['#default_value'] = $tid;
        }
        $form['field_research_group']['#access'] = FALSE;
        hide($form['metatags']);
        hide($form['password_policy']);
        hide($form['signature_settings']);
        hide($form['additional_settings']);
        array_unshift($form['#validate'], "_check_admin_grupo_blog_node_form");
        $form['#submit'][] = '_callback_on_post_article_save';
        $form['actions']['submit']['#submit'][] = '_callback_on_post_article_save';
      }
      break;
    case 'views_exposed_form':
      if($form_state['view']->name == 'recursos_de_informacion' && $form_state['view']->current_display == 'recursos_informacion'){
        array_unshift($form['#submit'], '_view_recursos_alter_filter_body_value');
      }
      break;
    default:
      break;
  }

}

function _view_recursos_alter_filter_body_value($form, &$form_state) {
  $form_state['values']['bv'] = $form_state['values']['title'];
}

/**
* get Pdf url Form String
*/
function getPdfUrlsFormString($string = "") {
 $items = array();
 $urls = getUrlsFormString($string);
 if(($urls != FALSE) && is_array($urls) && !empty($urls)){
    foreach ($urls as $key => $url) {
      $str = strtolower($url);
      if (substr($str, -4) == '.pdf') {
         $items[] = $url;
      }
    }
 }
 return $items;
}

/**
* get Urls Form String
*/
function getUrlsFormString($string = "") {
 if(!empty($string)){
   $regex = '/https?\:\/\/[^\" ]+/i';
   preg_match_all($regex, $string, $matches);
   return isset($matches[0])?($matches[0]):FALSE;
 }else{
   return FALSE;
 }

}

/**
* Redirect On Post Blog Save
*/
function _callback_on_post_article_save($form, &$form_state){
  $tid = $form['field_research_group']['und']['#default_value'];
  $form_state['redirect'] = 'taxonomy/term/' . $tid;
}

// /**
// * Redirect On Post Blog Save
// */
// function _callback_on_post_article_save($form, &$form_state){
//   $form_state['redirect'] = 'profile/articles';
// }

/**
* Redirect On Post Blog Save
*/
function _callback_on_post_blog_save($form, &$form_state){
  $tid = $form['field_research_group']['und']['#default_value'];
  $form_state['redirect'] = 'taxonomy/term/' . $tid;
}

/**
* Check Admin Grupo Blog Node Form
*/
function _check_admin_grupo_blog_node_form($form, &$form_state){
  if(user_has_role(ADMIN_GRUPO_RID)){
    global $user;
    $user_info = user_load($user->uid);
    if(isset($user_info->field_research_group[LANGUAGE_NONE][0]['tid'])){
      $form_state['values']['field_research_group'][LANGUAGE_NONE][0]['tid'] = $user_info->field_research_group[LANGUAGE_NONE][0]['tid'];
    }
  }
}


/**
 * General Callback for form_alter
 *
 * @param type $form
 * @param type $form_state
 */
function _callback_on_post_publication_save($form, &$form_state){
  $nid = $form_state['values']['nid'];
  $node = node_load($nid);
  if(isset($node->type) && ($node->type == 'publication')){
    $new_node = $node;
    //Update Publication Review.
    if(isset($new_node->field_review[LANGUAGE_NONE][0]['value'])){
      $review = $new_node->field_review[LANGUAGE_NONE][0]['value'];
      _update_review_in_child_publications($new_node->nid, $review);
      if(isset($new_node->field_source[LANGUAGE_NONE][0]['target_id'])){
        $parent_id = $new_node->field_source[LANGUAGE_NONE][0]['target_id'];
        _update_review_in_parent_publications($parent_id, $review);
      }
    }
  }
}

/**
* Check Review And Status Of Publication
*/
function _check_review_and_status_of_publication($form, &$form_state) {
  if( isset($form_state['values']['field_review'][LANGUAGE_NONE][0]['value']) && isset($form_state['values']['field_estado_publicaci_n'][LANGUAGE_NONE][0]['workflow']['workflow_sid']) ){
    $review = $form_state['values']['field_review'][LANGUAGE_NONE][0]['value'];
    $status = $form_state['values']['field_estado_publicaci_n'][LANGUAGE_NONE][0]['workflow']['workflow_sid'];
    if(($status == PUB_STATUS_APPROVED) && ($review != PUB_REVIEW_REVIEWED)){
      form_set_error('field_review', t('La publicación no puede ser Aprobada, antes de ser Revisada.'));
    }
  }
}

/**
 * Implements hook_user_login
 */
function banrep_core_user_login(&$edit, $account) {
  if(isset($account->roles) && (count($account->roles)>0)){
    if(in_array('investigador', $account->roles)){
      if(!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset'){
        $edit['redirect'] = '/profile/' . $account->name;
      }
    }
  }
}

/**
 * Redirects To Profile After Submit
 */
function banrep_core_submit($form, &$form_state)  {
  $form_state['redirect'] = 'profile';
}

function get_default_profile_image(){
  global $base_url;
  return $base_url.base_path().drupal_get_path('theme', 'banrep').'/images/user-profile.png';
}

function user_info_format_full($uid = '', $format = '', $color = ''){
  $user = user_load($uid);
  if($user){
    return theme('user_info_format_full', array('user' => $user, 'color' => $color));
  }
  return '';
}

function get_user_info_format($uid = ''){
  $user = user_load($uid);
  if($user){
    return theme('user_info_format', array('user' => $user));
  }
  return '';
}

function render_resources_block(){
  $bean = bean_load($bid = 1);
  $bean_view = bean_view($bean , $view_mode = 'default', $langcode = NULL);
  print render($bean_view);
}

function render_resource_editorial_block(){
  $bean = bean_load($bid = 2);
  $bean_view = bean_view($bean , $view_mode = 'default', $langcode = NULL);
  print render($bean_view);
}

function render_support_documents_block(){
  $bean = bean_load($bid = 3);
  $bean_view = bean_view($bean , $view_mode = 'default', $langcode = NULL);
  print render($bean_view);
}

function render_specialized_reference_block(){
  print views_embed_view('referencia_especializada', 'block');
}

function render_forums_block(){
  return '';
}

/**
 * Returns if a field value should be kept private.
 *
 * @param $fid
 *   Field Name.
 * @param $uid
 *   User ID.
 * @return bool
 *   TRUE if the field value should be kept private.
 */
function __maybe_show_the_field($field_name, $uid) {
  global $user;
  $fid = FALSE;
  $field_info_field = field_info_field($field_name);
  if(!is_null($field_info_field)){
    if(isset($field_info_field['id'])){
      $fid = $field_info_field['id'];
    }
  }
  if(user_is_logged_in() && ($fid != FALSE)){
    if($user->uid == $uid){
      return TRUE;
    }else{
      return !_user_field_privacy_value($fid, $uid);
    }
  }else{
    if(field_can_be_private($field_name) == FALSE){
      return TRUE;
    }else{
      // Puede ser privado.
      $check_if_field_is_private = check_if_field_is_private($field_name, $uid);
      return !$check_if_field_is_private;
    }
  }
}

function check_if_field_is_private($field_name = "", $owner_user_uid = ""){
  $private = FALSE;
  $instance_info = field_info_instance($entity_type = 'user', $field_name, $bundle_name = 'user');
  if(isset($instance_info['field_id'])){
    $field_id = $instance_info['field_id'];

    $result = db_select('user_field_privacy_value', 'u')
      ->fields('u')
      ->condition('uid', $owner_user_uid,'=')
      ->condition('fid', $field_id,'=')
      ->execute()
      ->fetchAssoc();

    if(isset($result['private'])){
      if($result['private'] == '1'){
        $private = TRUE;
      }
    }

  }
  return $private;
}

function field_can_be_private($field_name){
   $name = 'profile_setting_'.$field_name;
   return ((bool) variable_get($name, FALSE));
}

function print_group_color($uid = ""){
  $color = '';
  if (!empty($uid)) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'taxonomy_term')
      ->propertyCondition('vid', 2 )
     ->fieldCondition('field_members', 'target_id', $uid );
    $result = $query->execute();
    if (isset($result['taxonomy_term'])) {
      $tids = array_keys($result['taxonomy_term']);
      if(isset($tids[0])){
        $grupo = taxonomy_term_load($tids[0]);
        $name = '';
        if(isset($grupo->field_city[LANGUAGE_NONE][0]['tid'])){
           $name = get_term_name_by_tid($grupo->field_city[LANGUAGE_NONE][0]['tid']);
        }
        if(isset($grupo->field_color[LANGUAGE_NONE][0]['value'])){
           $color = $grupo->field_color[LANGUAGE_NONE][0]['value'];
        }
      }
    }
  }
  if (!empty($color)) {
    return '<div class="color-group" style="background: #' . $color . ';">' . $name . '</div>';
  }else{
    return '';
  }

}

/*
 * Get Conference documents Type options
 */
function get_conference_documents_type_options(){
  $categorias_de_conceptos_vid = CATEGORIAS_DE_CONCEPTOS_VID;
  $parent_tid = 2954;
  $terms = taxonomy_get_tree($vid = $categorias_de_conceptos_vid, $parent = $parent_tid);
  $options = [];
  if(!empty($terms)){
    foreach ($terms as $key => $term){
      $options[$term->tid] = $term->name;
    }
  }
  return $options;
}

/*
 * Get Articles Type options
 */
function get_articles_type_options(){
  $categorias_de_conceptos_vid = CATEGORIAS_DE_CONCEPTOS_VID;
  $parent_tid = PUB_TYPE_ARTICLE;
  $terms = taxonomy_get_tree($vid = $categorias_de_conceptos_vid, $parent = $parent_tid);
  $options = [];
  if(!empty($terms)){
    foreach ($terms as $key => $term){
      if($term->tid != PUB_TYPE_ARTICLE_TIPO_5){
        $options[$term->tid] = $term->name;
      }
    }
  }
  return $options;
}

/*
 * Get Books Type options
 */
function get_books_type_options(){
  $categorias_de_conceptos_vid = CATEGORIAS_DE_CONCEPTOS_VID;
  $parent_tid = PUB_TYPE_BOOK;
  $terms = taxonomy_get_tree($vid = $categorias_de_conceptos_vid, $parent = $parent_tid);
  $options = ['' => '-- Seleccione --'];
  if(!empty($terms)){
    foreach ($terms as $key => $term){
      if( !$term->depth ){
        $options[$term->tid] = $term->name;
      }
    }
  }
  return $options;
}

/*
 * Get Espe Magazine Type options
 */
function get_espe_magazine_type_options(){
  $categorias_de_conceptos_vid = CATEGORIAS_DE_CONCEPTOS_VID;
  $parent_tid = PUB_TYPE_ESPE_MAGAZINE;
  $terms = taxonomy_get_tree($vid = $categorias_de_conceptos_vid, $parent = $parent_tid);
  $options = ['' => '-- Seleccione --'];
  if(!empty($terms)){
    foreach ($terms as $key => $term){
      if( !$term->depth ){
        $options[$term->tid] = $term->name;
      }
    }
  }
  return $options;
}

/*
 * Get Books Type options
 */
function get_others_documents_type_options(){
  $categorias_de_conceptos_vid = CATEGORIAS_DE_CONCEPTOS_VID;
  $parent_tid = PUB_TYPE_OTHERS_DOCUMENTS;
  $terms = taxonomy_get_tree($vid = $categorias_de_conceptos_vid, $parent = $parent_tid);
  $options = ['' => '-- Seleccione --'];
  if(!empty($terms)){
    foreach ($terms as $key => $term){
      if( !$term->depth ){
        $options[$term->tid] = $term->name;
      }
    }
  }
  return $options;
}

/*
 * Get Books Chapters Type options
 */
function get_books_chapters_type_options(){
  $categorias_de_conceptos_vid = CATEGORIAS_DE_CONCEPTOS_VID;
  $parent_tid = PUB_TYPE_BOOK;
  $terms = taxonomy_get_tree($vid = $categorias_de_conceptos_vid, $parent = $parent_tid);
  $options = [];
  if(!empty($terms)){
    foreach ($terms as $key => $term){
      if( !$term->depth ){
        $options[$term->tid] = $term->name;
      }
    }
  }
  return $options;
}

/*
 * Get Books Role options
 */
function get_books_role_options($tid){
  $categorias_de_conceptos_vid = CATEGORIAS_DE_CONCEPTOS_VID;
  $terms = taxonomy_get_children($tid = $tid, $vid = $categorias_de_conceptos_vid);
  $options = [];
  if(!empty($terms)){
    foreach ($terms as $key => $term){
      if( !$term->depth ){
        $options[$term->tid] = $term->name;
      }
    }
  }
  return $options;
}

/*
 * Get work document Type options
 */
function get_work_document_type_options(){
  $matches = [];
  // Conceptos del usuario.
  $matches += _get_concepts(CONCEPT_TYPE_WORK_DOCUMENT, NULL, $source = 'externo', NULL, $format = 'select', $limit = -1);
  // Conceptos del sistema.
  $matches += _get_concepts(CONCEPT_TYPE_WORK_DOCUMENT, NULL, $source = 'sistema', NULL, $format = 'select', $limit = -1);
  return $matches;
}
/*
 * Get work document Type options
 */
function get_other_document_type_options(){
  $matches = [];
  // Conceptos del usuario.
  $matches += _get_concepts(CONCEPT_TYPE_OTHER_DOCUMENT, NULL, $source = 'externo', NULL, $format = 'select', $limit = -1, TRUE);
  // Conceptos del sistema.
  $matches += _get_concepts(CONCEPT_TYPE_OTHER_DOCUMENT, NULL, $source = 'sistema', NULL, $format = 'select', $limit = -1, TRUE);
  return $matches;
}

/**
* Get Term Name By Tid
*/
function get_term_name_by_tid($tid) {
  return db_select('taxonomy_term_data', 't')
  ->fields('t', array('name'))
  ->condition('tid', $tid)
  ->execute()
  ->fetchField();
}

/**
* Get Webform Component data
*/
function get_webform_component_data($nid, $form_key = '') {
  $allowed_values = array();
  $item =  db_select('webform_component', 'wc')
  ->fields('wc', array('extra'))
  ->condition('nid', $nid)
  ->condition('form_key', $form_key)
  ->execute()
  ->fetchField();
  if(!empty($item) && $item != FALSE ){
    $item = unserialize($item);
    if(isset($item['items'])){
      $string = $item['items'];
      $allowed_values = list_extract_allowed_values($string, 'list_text', TRUE);
    }
  }
  return $allowed_values;
}


/**
* get Webform Submission Last Message
*/
function get_webform_submission_last_message($nid, $sid, $wsid) {
  $item =  db_select('webform_workflow_transition', 'wt')
  ->fields('wt', array('message'))
  ->condition('nid', $nid)
  ->condition('sid', $sid)
  ->condition('new_state_wsid', $wsid)
  ->execute()
  ->fetchField();
  $result = t('Tu Solicitud aun no ha sido respondida, por favor verificar mas tarde!.');
  if( (!empty($item)) && ($item != FALSE) && ($item != 'Set automatically on initial submission') ){
    $result = $item;
  }
  return $result;
}


function _user_send_mail_custom($form, &$form_state, $send_mail){
    $form['contact_information'] = array(
      '#markup' =>  t('<h3>Form contact</h3>'),
    );
    $form['send_mail_hidden'] = array(
      '#type' => 'hidden',
      '#value' => base64_encode($send_mail),
    );
    $form['subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#attributes' =>array('placeholder' => t('Subject')),
      '#required' => TRUE
    );
    $form['description'] = array(
      '#type' => 'textarea',
      '#title' => t('Message'),
      '#attributes' =>array('placeholder' => t('Message')),
      '#required' => TRUE
    );
    $form['email'] = array(
      '#type' => 'textfield',
      '#title' => t('Please contact this email'),
      '#attributes' =>array('placeholder' => t('Your E-mail address')),
      '#required' => TRUE
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Send email'),
    );
    return $form;
}

function _user_send_mail_custom_validate($form, &$form_state) {
  $valid_email = $form_state['values']['email'];
  if (!valid_email_address($valid_email)) {
  form_set_error('email', t('Sorry. Your email address,' . $valid_email . ', is not valid. Please submit a valid E-mail address.'));
  }
}

function _user_send_mail_custom_mail($key, &$message, $params) {

  $headers = array(
    'MIME-Version' => '1.0',
    'Content-Type' => 'text/html; charset=UTF-8;',
    'Content-Transfer-Encoding' => '8Bit',
    'X-Mailer' => 'Drupal'
  );

  foreach ($headers as $key => $value) {
    $message['headers'][$key] = $value;
  }

  $message['subject'] = $params['subject'];
  $message['body'] = $params['body'];
}


function _user_send_mail_custom_submit($form, &$form_state) {

    $values = $form_state['values'];
    $valid_email = $values['email'];
    $from = $valid_email;
    $body = $values['description'];
    $subject = $values['subject'];
    $to = base64_decode($values['send_mail_hidden']); // Set this email address - emails will be sent to this email address!
    $params = array(
    'body' => $body,
    'subject' => $subject,
    'email' => $valid_email,
    );

    if (drupal_mail('banrep_core', 'investigador', $to, language_default(), $params, $from, TRUE))
    {
      watchdog('banrep_core', "Send mail message:\n from: %from\n subject: %subject\n body:  %body\n to: %to", array('%from' => $from, '%subject' => $subject, '%body' => $values['description'],'%to' => $to), WATCHDOG_NOTICE);
      drupal_set_message(t('Your message has been sent.'));
    } else {
      watchdog('banrep_core', "Send mail message error for : \nfrom: %from\n subject: %subject\n body:  %body\n to: ", array('%from' => $from, '%subject' => $subject, '%body' => $values['description'],'%to' => $to), WATCHDOG_ERROR);
        drupal_set_message(t('There was an error send mail for this user. Please try again later'));
    }
}

/**
 * Implements hook_mail().
 */
function banrep_core_mail($key, &$message, $params) {
  $message['headers'] = array_merge(
    $message['headers'],
    array(
      'MIME-Version' => '1.0',
      'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
      'Content-Transfer-Encoding' => '8Bit',
      'X-Mailer' => 'Drupal'
    )
  );
  global $user;
  $options = array(
    'langcode' => $message['language']->language,
    );
  switch ($key) {
    case 'investigador':
      $message['subject'] = 'Mensaje directo desde portal Investigaciones económicas';
      $message['body'][] = '<h3>Estimado Usuario,</h3>';
      $message['body'][] = '<p>Le informamos que una persona le ha escrito desde el portal de investigaciones económicas, estos son los datos de contacto:';
      $message['body'][] = '<p><b>Asunto:</b> ' . $params['subject'] . '</p>';
      $message['body'][] = '<p><b>Email:</b> ' . $params['email'] . '</p>';
      $message['body'][] = '<p><b>Mensaje:</b> ' . $params['body'] . '</p>';
      break;
  }
}


/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function banrep_core_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if((arg(0) == "investigadores" ||  arg(0) == "researchers") && $form_id == 'views_exposed_form') {
    $query = db_select('field_data_field_city', 'c')->distinct();
    $query->innerJoin('taxonomy_term_data', 't', 'c.field_city_tid = t.tid');
    $query->fields('c', array('field_city_tid'));
    $query->fields('t', array('name'));
    $query->condition('c.bundle', 'user');
    $query->orderBy('t.name', 'ASC');
    $result_query = $query->execute()->fetchAll();
    $ciudades = array(
      'All' => t('- Any -'),
    );
    foreach ($result_query as $key => $city) {
      $ciudades[$city->field_city_tid] = $city->name;
    }
    $form['city']['#type'] = 'select';
    $form['city']['#options'] = $ciudades;
    $form['city']['#default_option'] = (isset($_GET['city'])) ? $_GET['city'] : '';
    $form['city']['#size'] = 1;
    $form['linea']['#default_value'] = (isset($_GET['linea'])) ? $_GET['linea'] : '';
  }
}

/*
* Path to Search Embed()
*/
function path_to_search_embed(){
  return file_create_url(path_to_theme().'/search.html');
}

/*
* Get Promotes publications
*/
function drupal_get_promotes_publications() {
  $promotes = drupal_set_promotes_publications();

  // During a bootstrap, menu.inc is not included and thus we cannot provide a title.
  if (!isset($promotes) && function_exists('build_promotes_publications')) {
    $promotes = drupal_set_promotes_publications(build_promotes_publications());
  }

  return $promotes;
}

/*
* Set Promotes publications
*/
function drupal_set_promotes_publications($promotes = NULL) {
  $stored_promotes = &drupal_static(__FUNCTION__);

  if (isset($promotes)) {
    $stored_promotes = $promotes;
  }

  return $stored_promotes;
}

/*
* Build Promotes publications
*/
function build_promotes_publications(){
  $view_object = views_get_view("publicaciones");
  $view_object->set_display("promotes_publications");
  $view_object->pre_execute();
  $view_object->execute();
  $results = $view_object->result;
  $promotes = array();
  if(!empty($results) && is_array($results)){
    foreach ($results as $key => $result) {
      $promotes[] = $result->nid;
    }
  }
  return $promotes;
}

/*
* Helper function to remove accent mark.
*/
function quitar_tildes($cadena) {
  $originales= array ("á","é","í","ó","ú","Á","É","Í","Ó","Ú","ñ","Ñ");
  $modificadas= array ("a","e","i","o","u","A","E","I","O","U","n","N");
  $cadena = str_replace($originales, $modificadas, $cadena);
  $cadena = strtolower($cadena);
  return utf8_encode($cadena);
}

/*
* SCOPUS Author Profile by the unique Author ID.
*/
function get_scopus_author_profile($field_scopus_author_author_id = FALSE){

  if($field_scopus_author_author_id != FALSE){

    // $live_api_key = '933e9e90b2adcb997611146810dbbeb0';
    $developer_api_key = 'b3a71de2bde04544495881ed9d2f9c5b';
    $apikey = variable_get( 'scopus_api_key', $developer_api_key );

    $options = array(
      'method' => 'GET',
      'timeout' => 15,
      'headers' => array(
        'Content-Type' => 'application/json',
        'X-ELS-APIKey' => "{$apikey}",
       ),
    );

    $data = array(
      'apiKey' => "{$apikey}",
      'author_id' => "{$field_scopus_author_author_id}",
      'view' => 'COMPLETE',
    );

    $url = "https://api.elsevier.com/content/author/author_id/{$field_scopus_author_author_id}";
    /* Example Uri */
    $uri = 'public://ejemplo-scopus.xml';
    $url = file_create_url($uri);
    $full_url = url($url, array( 'query' => $data));
    $result = drupal_http_request($full_url, $options);

    if( isset($result->code) && ($result->code = '200') && isset($result->data) && !empty($result->data) ){
      $xmlString = $result->data;
      $xml = new SimpleXMLElement($xmlString);
    }

  }
  return "";
}

/**
*  Get Repec Author Profile
*/
function get_repec_author_profile($field_repec_id = FALSE){

  $cites = "";
  $citedBy = "";
  $result = array();

  if( !empty($field_repec_id) && ($field_repec_id != FALSE) ){
    $request_url = REPEC_API_URL . $field_repec_id;
    $options = array(
      'method' => 'GET',
      'timeout' => 15,
      'headers' => array(
        'Content-Type' => 'text/xml',
       ),
    );
    $data = array();
    if(!empty($data)){
      $full_url = url($request_url, array( 'query' => $data ));
    }else{
      $full_url = $request_url;
    }
    $result = drupal_http_request($full_url, $options);
    if( isset($result->code) && ($result->code = '200') && isset($result->data) && !empty($result->data) ){
      $xmlString = $result->data;
      $xml = new SimpleXMLElement($xmlString);

      $cites = (string) $xml->cites;
      $citedBy = (string) $xml->citedBy;

      $result = array(
        'cites' => $cites,
        'citedBy' => $citedBy,
      );
    }
  }

  return $result;

}

/**
* Get mis enlaces recomendados
*/
function get_mis_enlaces_recomendados($uid, $status = ''){
  $query = db_select('field_data_field_enlaces_recomendados', 'er');
  $query->leftJoin('field_data_field_url_recomendado', 'ur', 'er.field_enlaces_recomendados_value = ur.entity_id');
  $query->leftJoin('field_data_field_status', 'fs', 'er.field_enlaces_recomendados_value = fs.entity_id');
  if(!empty($status)){
    $query->condition('fs.field_status_value', array($status), 'IN');
  }
  $query->condition('er.entity_id', $uid);
  $query->fields('er');
  $query->fields('ur', array('field_url_recomendado_url', 'field_url_recomendado_title'));
  $query->fields('fs', array('field_status_value'));
  $users = $query->execute()->fetchAll();
  if(count($users) > 0 ){
    $results = array();
    foreach ($users as $key => $user) {
      if(isset($user->field_status_value) && !empty($user->field_status_value) && isset($user->field_url_recomendado_url) && !empty($user->field_url_recomendado_url)){
        $results[] = $user->field_enlaces_recomendados_value;
      }
    }
    return $results;
  }
  return FALSE;
}

/*
* Get Events by grupos de investigacion
*/
function _get_events_by_investigation_group($tid){
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', ' event')
    ->propertyCondition('status', NODE_PUBLISHED)
    ->fieldCondition('field_research_group', 'tid', $tid)
    ->range(0, 10);
  $result = $query->execute();
  $_items_nids = FALSE;
  if (isset($result['node'])) {
    $_items_nids = array_keys($result['node']);
  }
  return $_items_nids;
}

/**
* Get not empty research lines
*/
function _get_not_empty_research_lines($id){
  global $language;
  $idioma = $language->language;

  $query = db_select('taxonomy_term_data', 't')->distinct();
  $query->Join('field_data_field_research_lines', 'lineas', 't.tid = lineas.field_research_lines_tid');
  $query->join('users','u','lineas.entity_id = u.uid');
  $query->join('users_roles','ur','u.uid = ur.uid');
	if($idioma == 'es'){
		$query->LeftJoin('field_data_field_title_es', 'titulo', 't.tid = titulo.entity_id');
		$query->fields('titulo', array('field_title_es_value'));
	}
	else {
		$query->LeftJoin('field_data_field_title_en', 'titulo', 't.tid = titulo.entity_id');
		$query->fields('titulo', array('field_title_en_value'));
	}

  $query->condition('t.vid', 17);
  $query->condition('ur.rid', 4, '=');
  $query->fields('t', array('name', 'tid'));
  $query->orderBy('t.name', 'ASC');

  $result = $query->execute();
  $items = '';
  $items .= '<select id="' . $id . '" name="linea" class="form-select"><option value="All" selected="selected">- ' . t('Any') . ' -</option>';

  while($record = $result->fetchObject()) {
		if($idioma == 'es'){
      $items .= '<option value="' . $record->tid . '">' . $record->name .' - ' . $record->field_title_es_value . '</option>';
		}
		else {
			if($idioma == 'en'){
				$items .= '<option value="' . $record->tid . '">' . $record->name .' - ' . $record->field_title_en_value . '</option>';
			}
		}
  }

  $items .= '</select>';

  return $items;
}

/**
* Get username by uid
*/
function _get_username_by_uid($uid){
  $username = db_query("SELECT u.name FROM {users} u WHERE u.uid =  :uid", array(':uid' => $uid))->fetchField();
  return $username;
}

function _get_fullname_by_uid($uid) {
  $query = db_select('field_data_field_full_name','name');
  $query->condition('name.entity_id', $uid);
  $query->condition('name.entity_type', 'user');
  $query->fields('name', array('field_full_name_value'));
  $fullname = $query->execute()->fetchField();

  return $fullname;
}

function _get_co_authors($coauthors){
  $names = array();
  foreach ($coauthors as $key => $item) {
    $names[] = _get_coauthor($item['value']);
  }

  return implode(',', $names);
}

function _get_coauthor($field_collection_id) {

  $query = db_select('field_data_field_co_author','t1');
  $query->leftJoin('field_data_field_full_name', 'name', 't1.field_co_author_target_id = name.entity_id');
  $query->condition('t1.entity_id', $field_collection_id);
  $query->condition('t1.entity_type', 'field_collection_item');
  $query->fields('name', array('field_full_name_value'));
  $fullname = $query->execute()->fetchField();

  return $fullname;
}

/**
 * Helper that generates a machine name using a provided human readable name.
 *
 * @param string $human_name
 *   Human readable name.
 *
 * @return string
 *   Machine name cleaned-up of any special chars.
 */
function human_to_machine($human_name) {
  return strtolower(preg_replace(array(
    '/[^a-zA-Z0-9]+/',
    '/-+/',
    '/^-+/',
    '/-+$/',
  ), array('-', '-', '', ''), $human_name));
}

/**
 * Restringe numero de palabras().
 */
function _banrep_recorte_palabras($ad, $words_number = 200) {
  $ad = strip_tags($ad);
  if (strlen($ad) < $words_number) {
    $ad = $ad;
  }
  else {
    $ad = substr($ad, 0, $words_number);
    $rpos = strrpos($ad, ' ');
    if ($rpos > 0) {
      $ad = substr($ad, 0, $rpos);
    }
    $ad .= '...';
  }
  return $ad;
}


/**
 * Funcion para crear coautores a
 * una publicacion
 */
function _publication_create_co_authors_banco($source_nid, $co_authors, $approved = FALSE){
  
  # verified the $co_authors param have the property tid and uid
  // foreach($co_authors as $key => $co_author){
  //   if(is_numeric($key)){
  //     if(!in_array('tid',$co_author) || !in_array('rid', $co_author) || !in_array('uid',$co_author)){
  //       $tid_and_uid = _get_co_author_uid_by_name($co_author['co_authors_author']);
  //       $co_authors[$key]['tid'] = $tid_and_uid['tid'];
  //       $co_authors[$key]['uid'] = $tid_and_uid['uid'];
  //       $co_authors[$key]['rid'] = $co_author['rol_within_publication'];
  //     }
  //   }
  // }

  $source_pub = node_load($source_nid);
  $query = new EntityFieldQuery();
  $pub_user_nids_to_be_deleted =
    $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'pub_user')
    ->fieldCondition('field_publicacion', 'target_id', $source_nid)
    ->execute()
  ;
  if (!empty($pub_user_nids_to_be_deleted)) {
    $pub_user_nids_to_be_deleted = $pub_user_nids_to_be_deleted['node'];
  }
  
  foreach ($co_authors as $key => $co_author) {
    if (isset($co_author['uid']) && isset($co_author['rid'])) {
      $user = user_load($co_author['uid']);
      
      $user_full_name = field_get_items('user', $user, 'field_full_name');
      $user_research_group =
        field_get_items('user', $user, 'field_research_group')
      ;
      $query = new EntityFieldQuery();
      $pub_user =
        $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'pub_user')
        ->fieldCondition('field_publicacion', 'target_id', $source_nid)
        ->fieldCondition('field_user_reference', 'target_id', $co_author['uid'])
        ->execute()
      ;

      if ( empty($pub_user) ) {
        $pub_user_base = new stdClass();  // Create a new node object
        $pub_user_base->type = 'pub_user';  // Content type
        $pub_user_base->language = LANGUAGE_NONE;  // Or e.g. 'en' if locale is enabled
        node_object_prepare($pub_user_base);  //Set some default values
        $pub_user_base->field_publicacion[LANGUAGE_NONE][]['target_id'] =
          $source_nid
        ;
        $pub_user_base->field_user_reference[LANGUAGE_NONE][]['target_id'] =
          $co_author['uid']
        ;
      }
      else {
        $pub_user_nid = array_keys($pub_user['node'])[0];
        $pub_user_base = node_load($pub_user_nid);
        unset($pub_user_nids_to_be_deleted[$pub_user_nid]);
      }
      if ($user_research_group !== FALSE) {
        $pub_user_base->field_research_group[LANGUAGE_NONE][]['tid'] =
          $user_research_group[0]['tid']
        ;
      }
      $pub_user_base->title =
        $source_pub->title .
        ' - ' .
        $user_full_name[0]['safe_value']
      ;
      $pub_user_base->field_main_author[LANGUAGE_NONE][0]['value'] =
        (isset($co_author['main']) && $co_author['main'] === TRUE ? 1 : 0)
      ;
      $pub_user_base->status = 1;
      $pub_user_base->promote = 0;
      $pub_user_base->sticky = 0;
      $pub_user_base->comment = 0; 
      if ($approved) {
        $pub_user_base->field_estado_publicaci_n[LANGUAGE_NONE][0]['value'] = 3;
        $pub_user_base->field_estado_publicaci_n[LANGUAGE_NONE][0]['workflow']['workflow_sid'] = 3;
      }
      node_save($pub_user_base);
    }
  }
  foreach ($pub_user_nids_to_be_deleted as $pub_user_nid=>$value) {
    node_delete($pub_user_nid);
  }
}

function banrep_core_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'taxonomy_form_term' && arg(1) == 'group'){
    $form['field_color']['#access'] = FALSE;
    $form['field_likes']['#access'] = FALSE;
  }
}

function profile_group_validate_img($form, &$form_state) {
  $image = $form_state['values']['field_image'];
  if (!isset($image['und'][0]['fid']) ||
      (isset($image['und'][0]['fid']) && $image['und'][0]['fid'] == 0)){
      unset ($form_state['values']['field_image']);
      unset ($form_state['input']['field_image']);
      unset ($form_state['input']['field']['field_image']);
      unset ($form_state['term']->field_image);
  }
}


function _banrep_obtener_lineas_codigo($codigos){
  global $language;
  $nombres = array();
  foreach ($codigos as $key => $codigo) {
    if($language->language == 'es'){
      $query = db_select('field_data_field_title_es', 't');
      $query->fields('t', array('field_title_es_value'));
    }
    else {
      $query = db_select('field_data_field_title_en', 't');
      $query->fields('t', array('field_title_en_value'));
    }
    $query->join('taxonomy_term_data', 'td', 't.entity_id = td.tid');
    $query->condition('td.name', '%'.db_like($codigo), 'LIKE')->range(0,1);
    $nombres[] = $query->execute()->fetchField();
  }

  return $nombres;
}

function _banrep_obtener_lineas_tid($codigos){
  global $language;
  $nombres = array();
  foreach ($codigos as $key => $codigo) {
    $query = db_select('taxonomy_term_data', 't');
    $query->fields('t', array('tid'));
    $query->condition('t.name', '%'.db_like($codigo), 'LIKE')->range(0,1);
    $nombres[] = $query->execute()->fetchField();
  }

  return $nombres;
}